/*!
 * jQuery JavaScript Library v1.11.0
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-01-23T21:02Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper window is present,
		// execute the factory and get jQuery
		// For environments that do not inherently posses a window with a document
		// (such as Node.js), expose a jQuery-making factory as module.exports
		// This accentuates the need for the creation of a real window
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//

var deletedIds = [];

var slice = deletedIds.slice;

var concat = deletedIds.concat;

var push = deletedIds.push;

var indexOf = deletedIds.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var trim = "".trim;

var support = {};



var
	version = "1.11.0",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return a 'clean' array
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return just the object
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: deletedIds.sort,
	splice: deletedIds.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		return obj - parseFloat( obj ) >= 0;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call(obj, "constructor") &&
				!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( support.ownLast ) {
			for ( key in obj ) {
				return hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: trim && !trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( indexOf ) {
				return indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		while ( j < len ) {
			first[ i++ ] = second[ j++ ];
		}

		// Support: IE<9
		// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
		if ( len !== len ) {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: function() {
		return +( new Date() );
	},

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v1.10.16
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-01-13
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	compile,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== strundefined && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare,
		doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", function() {
				setDocument();
			}, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", function() {
				setDocument();
			});
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName ) && assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select t=''><option selected=''></option></select>";

			// Support: IE8, Opera 10-12
			// Nothing should be selected when empty strings follow ^= or $= or *=
			if ( div.querySelectorAll("[t^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] && match[4] !== undefined ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
				}
				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
}

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.unique( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );

					} else if ( !(--remaining) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	}
});

/**
 * Clean-up method for dom ready events
 */
function detach() {
	if ( document.addEventListener ) {
		document.removeEventListener( "DOMContentLoaded", completed, false );
		window.removeEventListener( "load", completed, false );

	} else {
		document.detachEvent( "onreadystatechange", completed );
		window.detachEvent( "onload", completed );
	}
}

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	// readyState === "complete" is good enough for us to call the dom ready in oldIE
	if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
		detach();
		jQuery.ready();
	}
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};


var strundefined = typeof undefined;



// Support: IE<9
// Iteration over object's inherited properties before its own
var i;
for ( i in jQuery( support ) ) {
	break;
}
support.ownLast = i !== "0";

// Note: most support tests are defined in their respective modules.
// false until the test is run
support.inlineBlockNeedsLayout = false;

jQuery(function() {
	// We need to execute this one support test ASAP because we need to know
	// if body.style.zoom needs to be set.

	var container, div,
		body = document.getElementsByTagName("body")[0];

	if ( !body ) {
		// Return for frameset docs that don't have a body
		return;
	}

	// Setup
	container = document.createElement( "div" );
	container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

	div = document.createElement( "div" );
	body.appendChild( container ).appendChild( div );

	if ( typeof div.style.zoom !== strundefined ) {
		// Support: IE<8
		// Check if natively block-level elements act like inline-block
		// elements when setting their display to 'inline' and giving
		// them layout
		div.style.cssText = "border:0;margin:0;width:1px;padding:1px;display:inline;zoom:1";

		if ( (support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 )) ) {
			// Prevent IE 6 from affecting layout for positioned elements #11048
			// Prevent IE from shrinking the body in IE 7 mode #12869
			// Support: IE<8
			body.style.zoom = 1;
		}
	}

	body.removeChild( container );

	// Null elements to avoid leaks in IE
	container = div = null;
});




(function() {
	var div = document.createElement( "div" );

	// Execute the test only if not already executed in another module.
	if (support.deleteExpando == null) {
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch( e ) {
			support.deleteExpando = false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( elem ) {
	var noData = jQuery.noData[ (elem.nodeName + " ").toLowerCase() ],
		nodeType = +elem.nodeType || 1;

	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
	return nodeType !== 1 && nodeType !== 9 ?
		false :

		// Nodes accept data unless otherwise specified; rejection can be conditional
		!noData || noData !== true && elem.getAttribute("classid") === noData;
};


var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}

function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// The following elements (space-suffixed to avoid Object.prototype collisions)
	// throw uncatchable exceptions if you attempt to set expando properties
	noData: {
		"applet ": true,
		"embed ": true,
		// ...but Flash objects (which have this classid) *can* handle expandos
		"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[0],
			attrs = elem && elem.attributes;

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {
						name = attrs[i].name;

						if ( name.indexOf("data-") === 0 ) {
							name = jQuery.camelCase( name.slice(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each(function() {
				jQuery.data( this, key, value );
			}) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};



// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		length = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < length; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			length ? fn( elems[0], key ) : emptyGet;
};
var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	var fragment = document.createDocumentFragment(),
		div = document.createElement("div"),
		input = document.createElement("input");

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a>";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName( "tbody" ).length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone =
		document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	input.type = "checkbox";
	input.checked = true;
	fragment.appendChild( input );
	support.appendChecked = input.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE6-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// #11217 - WebKit loses check when the name is after the checked attribute
	fragment.appendChild( div );
	div.innerHTML = "<input type='radio' checked='checked' name='t'/>";

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	support.noCloneEvent = true;
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Execute the test only if not already executed in another module.
	if (support.deleteExpando == null) {
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch( e ) {
			support.deleteExpando = false;
		}
	}

	// Null elements to avoid leaks in IE.
	fragment = div = input = null;
})();


(function() {
	var i, eventName,
		div = document.createElement( "div" );

	// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)
	for ( i in { submit: true, change: true, focusin: true }) {
		eventName = "on" + i;

		if ( !(support[ i + "Bubbles" ] = eventName in window) ) {
			// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
			div.setAttribute( eventName, "t" );
			support[ i + "Bubbles" ] = div.attributes[ eventName ].expando === false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Even when returnValue equals to undefined Firefox will still show alert
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined && (
				// Support: IE < 9
				src.returnValue === false ||
				// Support: Android < 4.0
				src.getPreventDefault && src.getPreventDefault() ) ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					jQuery._removeData( doc, fix );
				} else {
					jQuery._data( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!support.noCloneEvent || !support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = (rtagName.exec( elem ) || [ "", "" ])[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						deletedIds.push( id );
					}
				}
			}
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ (rtagName.exec( value ) || [ "", "" ])[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[i], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle ?

			// Use of this method is a temporary fix (more like optmization) until something better comes along,
			// since it was removed from specification and supported only in FF
			window.getDefaultComputedStyle( elem[ 0 ] ).display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}


(function() {
	var a, shrinkWrapBlocksVal,
		div = document.createElement( "div" ),
		divReset =
			"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;" +
			"display:block;padding:0;margin:0;border:0";

	// Setup
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName( "a" )[ 0 ];

	a.style.cssText = "float:left;opacity:.5";

	// Make sure that element opacity exists
	// (IE uses filter instead)
	// Use a regex to work around a WebKit issue. See #5145
	support.opacity = /^0.5/.test( a.style.opacity );

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!a.style.cssFloat;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Null elements to avoid leaks in IE.
	a = div = null;

	support.shrinkWrapBlocks = function() {
		var body, container, div, containerStyles;

		if ( shrinkWrapBlocksVal == null ) {
			body = document.getElementsByTagName( "body" )[ 0 ];
			if ( !body ) {
				// Test fired too early or in an unsupported environment, exit.
				return;
			}

			containerStyles = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px";
			container = document.createElement( "div" );
			div = document.createElement( "div" );

			body.appendChild( container ).appendChild( div );

			// Will be changed later if needed.
			shrinkWrapBlocksVal = false;

			if ( typeof div.style.zoom !== strundefined ) {
				// Support: IE6
				// Check if elements with layout shrink-wrap their children
				div.style.cssText = divReset + ";width:1px;padding:1px;zoom:1";
				div.innerHTML = "<div></div>";
				div.firstChild.style.width = "5px";
				shrinkWrapBlocksVal = div.offsetWidth !== 3;
			}

			body.removeChild( container );

			// Null elements to avoid leaks in IE.
			body = container = div = null;
		}

		return shrinkWrapBlocksVal;
	};

})();
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );



var getStyles, curCSS,
	rposition = /^(top|right|bottom|left)$/;

if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "";
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, computed ) {
		var left, rs, rsLeft, ret,
			style = elem.style;

		computed = computed || getStyles( elem );
		ret = computed ? computed[ name ] : undefined;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "" || "auto";
	};
}




function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			var condition = conditionFn();

			if ( condition == null ) {
				// The test was not ready at this point; screw the hook this time
				// but check again when needed next time.
				return;
			}

			if ( condition ) {
				// Hook not needed (or it's not possible to use it due to missing dependency),
				// remove it.
				// Since there are no other hooks for marginRight, remove the whole object.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.

			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	var a, reliableHiddenOffsetsVal, boxSizingVal, boxSizingReliableVal,
		pixelPositionVal, reliableMarginRightVal,
		div = document.createElement( "div" ),
		containerStyles = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px",
		divReset =
			"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;" +
			"display:block;padding:0;margin:0;border:0";

	// Setup
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName( "a" )[ 0 ];

	a.style.cssText = "float:left;opacity:.5";

	// Make sure that element opacity exists
	// (IE uses filter instead)
	// Use a regex to work around a WebKit issue. See #5145
	support.opacity = /^0.5/.test( a.style.opacity );

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!a.style.cssFloat;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Null elements to avoid leaks in IE.
	a = div = null;

	jQuery.extend(support, {
		reliableHiddenOffsets: function() {
			if ( reliableHiddenOffsetsVal != null ) {
				return reliableHiddenOffsetsVal;
			}

			var container, tds, isSupported,
				div = document.createElement( "div" ),
				body = document.getElementsByTagName( "body" )[ 0 ];

			if ( !body ) {
				// Return for frameset docs that don't have a body
				return;
			}

			// Setup
			div.setAttribute( "className", "t" );
			div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

			container = document.createElement( "div" );
			container.style.cssText = containerStyles;

			body.appendChild( container ).appendChild( div );

			// Support: IE8
			// Check if table cells still have offsetWidth/Height when they are set
			// to display:none and there are still other visible table cells in a
			// table row; if so, offsetWidth/Height are not reliable for use when
			// determining if an element has been hidden directly using
			// display:none (it is still safe to use offsets if a parent element is
			// hidden; don safety goggles and see bug #4512 for more information).
			div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
			tds = div.getElementsByTagName( "td" );
			tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
			isSupported = ( tds[ 0 ].offsetHeight === 0 );

			tds[ 0 ].style.display = "";
			tds[ 1 ].style.display = "none";

			// Support: IE8
			// Check if empty table cells still have offsetWidth/Height
			reliableHiddenOffsetsVal = isSupported && ( tds[ 0 ].offsetHeight === 0 );

			body.removeChild( container );

			// Null elements to avoid leaks in IE.
			div = body = null;

			return reliableHiddenOffsetsVal;
		},

		boxSizing: function() {
			if ( boxSizingVal == null ) {
				computeStyleTests();
			}
			return boxSizingVal;
		},

		boxSizingReliable: function() {
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},

		pixelPosition: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelPositionVal;
		},

		reliableMarginRight: function() {
			var body, container, div, marginDiv;

			// Use window.getComputedStyle because jsdom on node.js will break without it.
			if ( reliableMarginRightVal == null && window.getComputedStyle ) {
				body = document.getElementsByTagName( "body" )[ 0 ];
				if ( !body ) {
					// Test fired too early or in an unsupported environment, exit.
					return;
				}

				container = document.createElement( "div" );
				div = document.createElement( "div" );
				container.style.cssText = containerStyles;

				body.appendChild( container ).appendChild( div );

				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// Fails in WebKit before Feb 2011 nightlies
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				marginDiv = div.appendChild( document.createElement( "div" ) );
				marginDiv.style.cssText = div.style.cssText = divReset;
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";

				reliableMarginRightVal =
					!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );

				body.removeChild( container );
			}

			return reliableMarginRightVal;
		}
	});

	function computeStyleTests() {
		var container, div,
			body = document.getElementsByTagName( "body" )[ 0 ];

		if ( !body ) {
			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		container = document.createElement( "div" );
		div = document.createElement( "div" );
		container.style.cssText = containerStyles;

		body.appendChild( container ).appendChild( div );

		div.style.cssText =
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:absolute;display:block;padding:1px;border:1px;width:4px;" +
				"margin-top:1%;top:1%";

		// Workaround failing boxSizing test due to offsetWidth returning wrong value
		// with some non-1 values of body zoom, ticket #13543
		jQuery.swap( body, body.style.zoom != null ? { zoom: 1 } : {}, function() {
			boxSizingVal = div.offsetWidth === 4;
		});

		// Will be changed later if needed.
		boxSizingReliableVal = true;
		pixelPositionVal = false;
		reliableMarginRightVal = true;

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			pixelPositionVal = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			boxSizingReliableVal =
				( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";
		}

		body.removeChild( container );

		// Null elements to avoid leaks in IE.
		div = body = null;
	}

})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
		ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,

	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];


// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = support.boxSizing() && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Support: IE
				// Swallow errors from 'invalid' CSS values (#5509)
				try {
					// Support: Chrome, Safari
					// Setting style to blank string required to delete "style: x !important;"
					style[ name ] = "";
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					support.boxSizing() && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// Work around by temporarily setting element display to inline-block
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, dDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );
		dDisplay = defaultDisplay( elem.nodeName );
		if ( display === "none" ) {
			display = dDisplay;
		}
		if ( display === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !support.inlineBlockNeedsLayout || dDisplay === "inline" ) {
				style.display = "inline-block";
			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !support.shrinkWrapBlocks() ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {
	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	var a, input, select, opt,
		div = document.createElement("div" );

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName("a")[ 0 ];

	// First batch of tests.
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px";

	// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute("style") );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute("href") === "/a";

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement("form").enctype;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE8 only
	// Check if we can trust getAttribute("value")
	input = document.createElement( "input" );
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	// Null elements to avoid leaks in IE.
	a = input = select = opt = div = null;
})();


var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					jQuery.text( elem );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {

						// Support: IE6
						// When new option element is added to select box we need to
						// force reflow of newly added node in order to workaround delay
						// of initialization properties
						try {
							option.selected = optionSet = true;

						} catch ( _ ) {

							// Will be executed only in IE6
							option.scrollHeight;
						}

					} else {
						option.selected = false;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}

				return options;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = support.getSetAttribute,
	getSetInput = support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;
					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// Retrieve booleans specially
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {

	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?
		function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		} :
		function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
			}
		};
});

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			if ( name === "value" || value === elem.getAttribute( name ) ) {
				return value;
			}
		}
	};

	// Some attributes are constructed with empty-string values when not defined
	attrHandle.id = attrHandle.name = attrHandle.coords =
		function( elem, name, isXML ) {
			var ret;
			if ( !isXML ) {
				return (ret = elem.getAttributeNode( name )) && ret.value !== "" ?
					ret.value :
					null;
			}
		};

	// Fixing value retrieval on a button requires this module
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			if ( ret && ret.specified ) {
				return ret.value;
			}
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	});
}

if ( !support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}




var rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						-1;
			}
		}
	}
});

// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !support.hrefNormalized ) {
	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

// Support: Safari, IE9+
// mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});

// IE6/7 call enctype encoding
if ( !support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

jQuery.parseJSON = function( data ) {
	// Attempt to parse using the native JSON parser first
	if ( window.JSON && window.JSON.parse ) {
		// Support: Android 2.3
		// Workaround failure to string-cast null input
		return window.JSON.parse( data + "" );
	}

	var requireNonComma,
		depth = null,
		str = jQuery.trim( data + "" );

	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
	// after removing valid tokens
	return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

		// Force termination if we see a misplaced comma
		if ( requireNonComma && comma ) {
			depth = 0;
		}

		// Perform no more replacements after returning to outermost depth
		if ( depth === 0 ) {
			return token;
		}

		// Commas must not follow "[", "{", or ","
		requireNonComma = open || comma;

		// Determine new depth
		// array/object open ("[" or "{"): depth += true - false (increment)
		// array/object close ("]" or "}"): depth += false - true (decrement)
		// other cases ("," or primitive): depth += true - true (numeric cast)
		depth += !close - !open;

		// Remove this token
		return "";
	}) ) ?
		( Function( "return " + str ) )() :
		jQuery.error( "Invalid JSON: " + data );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	try {
		if ( window.DOMParser ) { // Standard
			tmp = new DOMParser();
			xml = tmp.parseFromString( data, "text/xml" );
		} else { // IE
			xml = new ActiveXObject( "Microsoft.XMLDOM" );
			xml.async = "false";
			xml.loadXML( data );
		}
	} catch( e ) {
		xml = undefined;
	}
	if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType.charAt( 0 ) === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
		(!support.reliableHiddenOffsets() &&
			((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
};

jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?
	// Support: IE6+
	function() {

		// XHR cannot access local files, always use ActiveX for that case
		return !this.isLocal &&

			// Support: IE7-8
			// oldIE XHR does not support non-RFC2616 methods (#13240)
			// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
			// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
			// Although this check for six methods instead of eight
			// since IE also does not support "trace" and "connect"
			/^(get|post|head|put|delete|options)$/i.test( this.type ) &&

			createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

var xhrId = 0,
	xhrCallbacks = {},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE<10
// Open requests must be manually aborted on unload (#5280)
if ( window.ActiveXObject ) {
	jQuery( window ).on( "unload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	});
}

// Determine support properties
support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( options ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !options.crossDomain || support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr(),
						id = ++xhrId;

					// Open the socket
					xhr.open( options.type, options.url, options.async, options.username, options.password );

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						// Support: IE<9
						// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
						// request header to a null-value.
						//
						// To keep consistent with other XHR implementations, cast the value
						// to string and ignore `undefined`.
						if ( headers[ i ] !== undefined ) {
							xhr.setRequestHeader( i, headers[ i ] + "" );
						}
					}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( options.hasContent && options.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, statusText, responses;

						// Was never called and is aborted or complete
						if ( callback && ( isAbort || xhr.readyState === 4 ) ) {
							// Clean up
							delete xhrCallbacks[ id ];
							callback = undefined;
							xhr.onreadystatechange = jQuery.noop;

							// Abort manually if needed
							if ( isAbort ) {
								if ( xhr.readyState !== 4 ) {
									xhr.abort();
								}
							} else {
								responses = {};
								status = xhr.status;

								// Support: IE<10
								// Accessing binary-data responseText throws an exception
								// (#11426)
								if ( typeof xhr.responseText === "string" ) {
									responses.text = xhr.responseText;
								}

								// Firefox throws an exception when accessing
								// statusText for faulty cross-domain requests
								try {
									statusText = xhr.statusText;
								} catch( e ) {
									// We normalize with Webkit giving an empty statusText
									statusText = "";
								}

								// Filter status for non standard behaviors

								// If the request is local and we have data: assume a success
								// (success with no data won't get notified, that's the best we
								// can do given current implementations)
								if ( !status && options.isLocal && !options.crossDomain ) {
									status = responses.text ? 200 : 404;
								// IE - #1450: sometimes returns 1223 when it should be 204
								} else if ( status === 1223 ) {
									status = 204;
								}
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, xhr.getAllResponseHeaders() );
						}
					};

					if ( !options.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						// Add to the list of active xhr callbacks
						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};





var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			jQuery.inArray("auto", [ curCSSTop, curCSSLeft ] ) > -1;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			box = { top: 0, left: 0 },
			elem = this[ 0 ],
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
			left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

define("jquery", function(){});

/*!
 * https://github.com/es-shims/es5-shim
 * @license es5-shim Copyright 2009-2014 by contributors, MIT License
 * see https://github.com/es-shims/es5-shim/blob/master/LICENSE
 */

// vim: ts=4 sts=4 sw=4 expandtab

//Add semicolon to prevent IIFE from being passed as argument to concated code.
;

// UMD (Universal Module Definition)
// see https://github.com/umdjs/umd/blob/master/returnExports.js
define('../lib/es5-shim',[],function () {

    /**
     * Brings an environment as close to ECMAScript 5 compliance
     * as is possible with the facilities of erstwhile engines.
     *
     * Annotated ES5: http://es5.github.com/ (specific links below)
     * ES5 Spec: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
     * Required reading: http://javascriptweblog.wordpress.com/2011/12/05/extending-javascript-natives/
     */

//
// Function
// ========
//

// ES-5 15.3.4.5
// http://es5.github.com/#x15.3.4.5

    function Empty() {}

    if (!Function.prototype.bind) {
        Function.prototype.bind = function bind(that) { // .length is 1
            // 1. Let Target be the this value.
            var target = this;
            // 2. If IsCallable(Target) is false, throw a TypeError exception.
            if (typeof target != "function") {
                throw new TypeError("Function.prototype.bind called on incompatible " + target);
            }
            // 3. Let A be a new (possibly empty) internal list of all of the
            // argument values provided after thisArg (arg1, arg2 etc), in order.
            // XXX slicedArgs will stand in for "A" if used
            var args = _Array_slice_.call(arguments, 1); // for normal call
            // 4. Let F be a new native ECMAScript object.
            // 11. Set the [[Prototype]] internal property of F to the standard
            // built-in Function prototype object as specified in 15.3.3.1.
            // 12. Set the [[Call]] internal property of F as described in
            // 15.3.4.5.1.
            // 13. Set the [[Construct]] internal property of F as described in
            // 15.3.4.5.2.
            // 14. Set the [[HasInstance]] internal property of F as described in
            // 15.3.4.5.3.
            var binder = function () {

                if (this instanceof bound) {
                    // 15.3.4.5.2 [[Construct]]
                    // When the [[Construct]] internal method of a function object,
                    // F that was created using the bind function is called with a
                    // list of arguments ExtraArgs, the following steps are taken:
                    // 1. Let target be the value of F's [[TargetFunction]]
                    // internal property.
                    // 2. If target has no [[Construct]] internal method, a
                    // TypeError exception is thrown.
                    // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
                    // property.
                    // 4. Let args be a new list containing the same values as the
                    // list boundArgs in the same order followed by the same
                    // values as the list ExtraArgs in the same order.
                    // 5. Return the result of calling the [[Construct]] internal
                    // method of target providing args as the arguments.

                    var result = target.apply(
                        this,
                        args.concat(_Array_slice_.call(arguments))
                    );
                    if (Object(result) === result) {
                        return result;
                    }
                    return this;

                } else {
                    // 15.3.4.5.1 [[Call]]
                    // When the [[Call]] internal method of a function object, F,
                    // which was created using the bind function is called with a
                    // this value and a list of arguments ExtraArgs, the following
                    // steps are taken:
                    // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
                    // property.
                    // 2. Let boundThis be the value of F's [[BoundThis]] internal
                    // property.
                    // 3. Let target be the value of F's [[TargetFunction]] internal
                    // property.
                    // 4. Let args be a new list containing the same values as the
                    // list boundArgs in the same order followed by the same
                    // values as the list ExtraArgs in the same order.
                    // 5. Return the result of calling the [[Call]] internal method
                    // of target providing boundThis as the this value and
                    // providing args as the arguments.

                    // equiv: target.call(this, ...boundArgs, ...args)
                    return target.apply(
                        that,
                        args.concat(_Array_slice_.call(arguments))
                    );

                }

            };

            // 15. If the [[Class]] internal property of Target is "Function", then
            // a. Let L be the length property of Target minus the length of A.
            // b. Set the length own property of F to either 0 or L, whichever is
            // larger.
            // 16. Else set the length own property of F to 0.

            var boundLength = Math.max(0, target.length - args.length);

            // 17. Set the attributes of the length own property of F to the values
            // specified in 15.3.5.1.
            var boundArgs = [];
            for (var i = 0; i < boundLength; i++) {
                boundArgs.push("$" + i);
            }

            // XXX Build a dynamic function with desired amount of arguments is the only
            // way to set the length property of a function.
            // In environments where Content Security Policies enabled (Chrome extensions,
            // for ex.) all use of eval or Function costructor throws an exception.
            // However in all of these environments Function.prototype.bind exists
            // and so this code will never be executed.
            var bound = Function("binder", "return function(" + boundArgs.join(",") + "){return binder.apply(this,arguments)}")(binder);

            if (target.prototype) {
                Empty.prototype = target.prototype;
                bound.prototype = new Empty();
                // Clean up dangling references.
                Empty.prototype = null;
            }

            // TODO
            // 18. Set the [[Extensible]] internal property of F to true.

            // TODO
            // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
            // 20. Call the [[DefineOwnProperty]] internal method of F with
            // arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
            // thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
            // false.
            // 21. Call the [[DefineOwnProperty]] internal method of F with
            // arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
            // [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
            // and false.

            // TODO
            // NOTE Function objects created using Function.prototype.bind do not
            // have a prototype property or the [[Code]], [[FormalParameters]], and
            // [[Scope]] internal properties.
            // XXX can't delete prototype in pure-js.

            // 22. Return F.
            return bound;
        };
    }

// Shortcut to an often accessed properties, in order to avoid multiple
// dereference that costs universally.
// _Please note: Shortcuts are defined after `Function.prototype.bind` as we
// us it in defining shortcuts.
    var call = Function.prototype.call;
    var prototypeOfArray = Array.prototype;
    var prototypeOfObject = Object.prototype;
    var _Array_slice_ = prototypeOfArray.slice;
// Having a toString local variable name breaks in Opera so use _toString.
    var _toString = call.bind(prototypeOfObject.toString);
    var owns = call.bind(prototypeOfObject.hasOwnProperty);

// If JS engine supports accessors creating shortcuts.
    var defineGetter;
    var defineSetter;
    var lookupGetter;
    var lookupSetter;
    var supportsAccessors;
    if ((supportsAccessors = owns(prototypeOfObject, "__defineGetter__"))) {
        defineGetter = call.bind(prototypeOfObject.__defineGetter__);
        defineSetter = call.bind(prototypeOfObject.__defineSetter__);
        lookupGetter = call.bind(prototypeOfObject.__lookupGetter__);
        lookupSetter = call.bind(prototypeOfObject.__lookupSetter__);
    }

//
// Array
// =====
//

// ES5 15.4.4.12
// http://es5.github.com/#x15.4.4.12
// Default value for second param
// [bugfix, ielt9, old browsers]
// IE < 9 bug: [1,2].splice(0).join("") == "" but should be "12"
    if ([1,2].splice(0).length != 2) {
        var array_splice = Array.prototype.splice;
        var array_push = Array.prototype.push;
        var array_unshift = Array.prototype.unshift;

        if (function() { // test IE < 9 to splice bug - see issue #138
            function makeArray(l) {
                var a = [];
                while (l--) {
                    a.unshift(l)
                }
                return a
            }

            var array = []
                , lengthBefore
                ;

            array.splice.bind(array, 0, 0).apply(null, makeArray(20));
            array.splice.bind(array, 0, 0).apply(null, makeArray(26));

            lengthBefore = array.length; //20
            array.splice(5, 0, "XXX"); // add one element

            if (lengthBefore + 1 == array.length) {
                return true;// has right splice implementation without bugs
            }
            // else {
            // IE8 bug
            // }
        }()) {//IE 6/7
            Array.prototype.splice = function(start, deleteCount) {
                if (!arguments.length) {
                    return [];
                } else {
                    return array_splice.apply(this, [
                        start === void 0 ? 0 : start,
                        deleteCount === void 0 ? (this.length - start) : deleteCount
                    ].concat(_Array_slice_.call(arguments, 2)))
                }
            };
        }
        else {//IE8
            Array.prototype.splice = function(start, deleteCount) {
                var result
                    , args = _Array_slice_.call(arguments, 2)
                    , addElementsCount = args.length
                    ;

                if (!arguments.length) {
                    return [];
                }

                if (start === void 0) { // default
                    start = 0;
                }
                if (deleteCount === void 0) { // default
                    deleteCount = this.length - start;
                }

                if (addElementsCount > 0) {
                    if (deleteCount <= 0) {
                        if (start == this.length) { // tiny optimisation #1
                            array_push.apply(this, args);
                            return [];
                        }

                        if (start == 0) { // tiny optimisation #2
                            array_unshift.apply(this, args);
                            return [];
                        }
                    }

                    // Array.prototype.splice implementation
                    result = _Array_slice_.call(this, start, start + deleteCount);// delete part
                    args.push.apply(args, _Array_slice_.call(this, start + deleteCount, this.length));// right part
                    args.unshift.apply(args, _Array_slice_.call(this, 0, start));// left part

                    // delete all items from this array and replace it to 'left part' + _Array_slice_.call(arguments, 2) + 'right part'
                    args.unshift(0, this.length);

                    array_splice.apply(this, args);

                    return result;
                }

                return array_splice.call(this, start, deleteCount);
            }

        }
    }

// ES5 15.4.4.12
// http://es5.github.com/#x15.4.4.13
// Return len+argCount.
// [bugfix, ielt8]
// IE < 8 bug: [].unshift(0) == undefined but should be "1"
    if ([].unshift(0) != 1) {
        var array_unshift = Array.prototype.unshift;
        Array.prototype.unshift = function() {
            array_unshift.apply(this, arguments);
            return this.length;
        };
    }

// ES5 15.4.3.2
// http://es5.github.com/#x15.4.3.2
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
    if (!Array.isArray) {
        Array.isArray = function isArray(obj) {
            return _toString(obj) == "[object Array]";
        };
    }

// The IsCallable() check in the Array functions
// has been replaced with a strict check on the
// internal class of the object to trap cases where
// the provided function was actually a regular
// expression literal, which in V8 and
// JavaScriptCore is a typeof "function". Only in
// V8 are regular expression literals permitted as
// reduce parameters, so it is desirable in the
// general case for the shim to match the more
// strict and common behavior of rejecting regular
// expressions.

// ES5 15.4.4.18
// http://es5.github.com/#x15.4.4.18
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/forEach


// Check failure of by-index access of string characters (IE < 9)
// and failure of `0 in boxedString` (Rhino)
    var boxedString = Object("a");
    var splitString = boxedString[0] != "a" || !(0 in boxedString);

    var properlyBoxesContext = function properlyBoxed(method) {
        // Check node 0.6.21 bug where third parameter is not boxed
        var properlyBoxes = true;
        if (method) {
            method.call('foo', function (item, index, context) {
                if (typeof context !== 'object') { properlyBoxes = false; }
            });
        }
        return !!method && properlyBoxes;
    };

    if (!Array.prototype.forEach || !properlyBoxesContext(Array.prototype.forEach)) {
        Array.prototype.forEach = function forEach(fun /*, thisp*/) {
            var object = toObject(this),
                self = splitString && _toString(this) == "[object String]" ?
                    this.split("") :
                    object,
                thisp = arguments[1],
                i = -1,
                length = self.length >>> 0;

            // If no callback function or if callback is not a callable function
            if (_toString(fun) != "[object Function]") {
                throw new TypeError(); // TODO message
            }

            while (++i < length) {
                if (i in self) {
                    // Invoke the callback function with call, passing arguments:
                    // context, property value, property key, thisArg object
                    // context
                    fun.call(thisp, self[i], i, object);
                }
            }
        };
    }

// ES5 15.4.4.19
// http://es5.github.com/#x15.4.4.19
// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map
    if (!Array.prototype.map || !properlyBoxesContext(Array.prototype.map)) {
        Array.prototype.map = function map(fun /*, thisp*/) {
            var object = toObject(this),
                self = splitString && _toString(this) == "[object String]" ?
                    this.split("") :
                    object,
                length = self.length >>> 0,
                result = Array(length),
                thisp = arguments[1];

            // If no callback function or if callback is not a callable function
            if (_toString(fun) != "[object Function]") {
                throw new TypeError(fun + " is not a function");
            }

            for (var i = 0; i < length; i++) {
                if (i in self)
                    result[i] = fun.call(thisp, self[i], i, object);
            }
            return result;
        };
    }

// ES5 15.4.4.20
// http://es5.github.com/#x15.4.4.20
// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter
    if (!Array.prototype.filter || !properlyBoxesContext(Array.prototype.filter)) {
        Array.prototype.filter = function filter(fun /*, thisp */) {
            var object = toObject(this),
                self = splitString && _toString(this) == "[object String]" ?
                    this.split("") :
                    object,
                length = self.length >>> 0,
                result = [],
                value,
                thisp = arguments[1];

            // If no callback function or if callback is not a callable function
            if (_toString(fun) != "[object Function]") {
                throw new TypeError(fun + " is not a function");
            }

            for (var i = 0; i < length; i++) {
                if (i in self) {
                    value = self[i];
                    if (fun.call(thisp, value, i, object)) {
                        result.push(value);
                    }
                }
            }
            return result;
        };
    }

// ES5 15.4.4.16
// http://es5.github.com/#x15.4.4.16
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every
    if (!Array.prototype.every || !properlyBoxesContext(Array.prototype.every)) {
        Array.prototype.every = function every(fun /*, thisp */) {
            var object = toObject(this),
                self = splitString && _toString(this) == "[object String]" ?
                    this.split("") :
                    object,
                length = self.length >>> 0,
                thisp = arguments[1];

            // If no callback function or if callback is not a callable function
            if (_toString(fun) != "[object Function]") {
                throw new TypeError(fun + " is not a function");
            }

            for (var i = 0; i < length; i++) {
                if (i in self && !fun.call(thisp, self[i], i, object)) {
                    return false;
                }
            }
            return true;
        };
    }

// ES5 15.4.4.17
// http://es5.github.com/#x15.4.4.17
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some
    if (!Array.prototype.some || !properlyBoxesContext(Array.prototype.some)) {
        Array.prototype.some = function some(fun /*, thisp */) {
            var object = toObject(this),
                self = splitString && _toString(this) == "[object String]" ?
                    this.split("") :
                    object,
                length = self.length >>> 0,
                thisp = arguments[1];

            // If no callback function or if callback is not a callable function
            if (_toString(fun) != "[object Function]") {
                throw new TypeError(fun + " is not a function");
            }

            for (var i = 0; i < length; i++) {
                if (i in self && fun.call(thisp, self[i], i, object)) {
                    return true;
                }
            }
            return false;
        };
    }

// ES5 15.4.4.21
// http://es5.github.com/#x15.4.4.21
// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduce
    if (!Array.prototype.reduce) {
        Array.prototype.reduce = function reduce(fun /*, initial*/) {
            var object = toObject(this),
                self = splitString && _toString(this) == "[object String]" ?
                    this.split("") :
                    object,
                length = self.length >>> 0;

            // If no callback function or if callback is not a callable function
            if (_toString(fun) != "[object Function]") {
                throw new TypeError(fun + " is not a function");
            }

            // no value to return if no initial value and an empty array
            if (!length && arguments.length == 1) {
                throw new TypeError("reduce of empty array with no initial value");
            }

            var i = 0;
            var result;
            if (arguments.length >= 2) {
                result = arguments[1];
            } else {
                do {
                    if (i in self) {
                        result = self[i++];
                        break;
                    }

                    // if array contains no values, no initial value to return
                    if (++i >= length) {
                        throw new TypeError("reduce of empty array with no initial value");
                    }
                } while (true);
            }

            for (; i < length; i++) {
                if (i in self) {
                    result = fun.call(void 0, result, self[i], i, object);
                }
            }

            return result;
        };
    }

// ES5 15.4.4.22
// http://es5.github.com/#x15.4.4.22
// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduceRight
    if (!Array.prototype.reduceRight) {
        Array.prototype.reduceRight = function reduceRight(fun /*, initial*/) {
            var object = toObject(this),
                self = splitString && _toString(this) == "[object String]" ?
                    this.split("") :
                    object,
                length = self.length >>> 0;

            // If no callback function or if callback is not a callable function
            if (_toString(fun) != "[object Function]") {
                throw new TypeError(fun + " is not a function");
            }

            // no value to return if no initial value, empty array
            if (!length && arguments.length == 1) {
                throw new TypeError("reduceRight of empty array with no initial value");
            }

            var result, i = length - 1;
            if (arguments.length >= 2) {
                result = arguments[1];
            } else {
                do {
                    if (i in self) {
                        result = self[i--];
                        break;
                    }

                    // if array contains no values, no initial value to return
                    if (--i < 0) {
                        throw new TypeError("reduceRight of empty array with no initial value");
                    }
                } while (true);
            }

            if (i < 0) {
                return result;
            }

            do {
                if (i in this) {
                    result = fun.call(void 0, result, self[i], i, object);
                }
            } while (i--);

            return result;
        };
    }

// ES5 15.4.4.14
// http://es5.github.com/#x15.4.4.14
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
    if (!Array.prototype.indexOf || ([0, 1].indexOf(1, 2) != -1)) {
        Array.prototype.indexOf = function indexOf(sought /*, fromIndex */ ) {
            var self = splitString && _toString(this) == "[object String]" ?
                    this.split("") :
                    toObject(this),
                length = self.length >>> 0;

            if (!length) {
                return -1;
            }

            var i = 0;
            if (arguments.length > 1) {
                i = toInteger(arguments[1]);
            }

            // handle negative indices
            i = i >= 0 ? i : Math.max(0, length + i);
            for (; i < length; i++) {
                if (i in self && self[i] === sought) {
                    return i;
                }
            }
            return -1;
        };
    }

// ES5 15.4.4.15
// http://es5.github.com/#x15.4.4.15
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf
    if (!Array.prototype.lastIndexOf || ([0, 1].lastIndexOf(0, -3) != -1)) {
        Array.prototype.lastIndexOf = function lastIndexOf(sought /*, fromIndex */) {
            var self = splitString && _toString(this) == "[object String]" ?
                    this.split("") :
                    toObject(this),
                length = self.length >>> 0;

            if (!length) {
                return -1;
            }
            var i = length - 1;
            if (arguments.length > 1) {
                i = Math.min(i, toInteger(arguments[1]));
            }
            // handle negative indices
            i = i >= 0 ? i : length - Math.abs(i);
            for (; i >= 0; i--) {
                if (i in self && sought === self[i]) {
                    return i;
                }
            }
            return -1;
        };
    }

//
// Object
// ======
//

// ES5 15.2.3.14
// http://es5.github.com/#x15.2.3.14
    if (!Object.keys) {
        // http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
        var hasDontEnumBug = true,
            hasProtoEnumBug = (function () {}).propertyIsEnumerable('prototype'),
            dontEnums = [
                "toString",
                "toLocaleString",
                "valueOf",
                "hasOwnProperty",
                "isPrototypeOf",
                "propertyIsEnumerable",
                "constructor"
            ],
            dontEnumsLength = dontEnums.length;

        for (var key in {"toString": null}) {
            hasDontEnumBug = false;
        }

        Object.keys = function keys(object) {
            var isFunction = _toString(object) === '[object Function]',
                isObject = object !== null && typeof object === 'object';

            if (!isObject && !isFunction) {
                throw new TypeError("Object.keys called on a non-object");
            }

            var keys = [],
                skipProto = hasProtoEnumBug && isFunction;
            for (var name in object) {
                if (!(skipProto && name === 'prototype') && owns(object, name)) {
                    keys.push(name);
                }
            }

            if (hasDontEnumBug) {
                var ctor = object.constructor,
                    skipConstructor = ctor && ctor.prototype === object;
                for (var i = 0; i < dontEnumsLength; i++) {
                    var dontEnum = dontEnums[i];
                    if (!(skipConstructor && dontEnum === 'constructor') && owns(object, dontEnum)) {
                        keys.push(dontEnum);
                    }
                }
            }
            return keys;
        };

    }

//
// Date
// ====
//

// ES5 15.9.5.43
// http://es5.github.com/#x15.9.5.43
// This function returns a String value represent the instance in time
// represented by this Date object. The format of the String is the Date Time
// string format defined in 15.9.1.15. All fields are present in the String.
// The time zone is always UTC, denoted by the suffix Z. If the time value of
// this object is not a finite Number a RangeError exception is thrown.
    var negativeDate = -62198755200000,
        negativeYearString = "-000001";
    if (
        !Date.prototype.toISOString ||
            (new Date(negativeDate).toISOString().indexOf(negativeYearString) === -1)
        ) {
        Date.prototype.toISOString = function toISOString() {
            var result, length, value, year, month;
            if (!isFinite(this)) {
                throw new RangeError("Date.prototype.toISOString called on non-finite value.");
            }

            year = this.getUTCFullYear();

            month = this.getUTCMonth();
            // see https://github.com/es-shims/es5-shim/issues/111
            year += Math.floor(month / 12);
            month = (month % 12 + 12) % 12;

            // the date time string format is specified in 15.9.1.15.
            result = [month + 1, this.getUTCDate(),
                this.getUTCHours(), this.getUTCMinutes(), this.getUTCSeconds()];
            year = (
                (year < 0 ? "-" : (year > 9999 ? "+" : "")) +
                    ("00000" + Math.abs(year))
                        .slice(0 <= year && year <= 9999 ? -4 : -6)
                );

            length = result.length;
            while (length--) {
                value = result[length];
                // pad months, days, hours, minutes, and seconds to have two
                // digits.
                if (value < 10) {
                    result[length] = "0" + value;
                }
            }
            // pad milliseconds to have three digits.
            return (
                year + "-" + result.slice(0, 2).join("-") +
                    "T" + result.slice(2).join(":") + "." +
                    ("000" + this.getUTCMilliseconds()).slice(-3) + "Z"
                );
        };
    }


// ES5 15.9.5.44
// http://es5.github.com/#x15.9.5.44
// This function provides a String representation of a Date object for use by
// JSON.stringify (15.12.3).
    var dateToJSONIsSupported = false;
    try {
        dateToJSONIsSupported = (
            Date.prototype.toJSON &&
                new Date(NaN).toJSON() === null &&
                new Date(negativeDate).toJSON().indexOf(negativeYearString) !== -1 &&
                Date.prototype.toJSON.call({ // generic
                    toISOString: function () {
                        return true;
                    }
                })
            );
    } catch (e) {
    }
    if (!dateToJSONIsSupported) {
        Date.prototype.toJSON = function toJSON(key) {
            // When the toJSON method is called with argument key, the following
            // steps are taken:

            // 1. Let O be the result of calling ToObject, giving it the this
            // value as its argument.
            // 2. Let tv be toPrimitive(O, hint Number).
            var o = Object(this),
                tv = toPrimitive(o),
                toISO;
            // 3. If tv is a Number and is not finite, return null.
            if (typeof tv === "number" && !isFinite(tv)) {
                return null;
            }
            // 4. Let toISO be the result of calling the [[Get]] internal method of
            // O with argument "toISOString".
            toISO = o.toISOString;
            // 5. If IsCallable(toISO) is false, throw a TypeError exception.
            if (typeof toISO != "function") {
                throw new TypeError("toISOString property is not callable");
            }
            // 6. Return the result of calling the [[Call]] internal method of
            // toISO with O as the this value and an empty argument list.
            return toISO.call(o);

            // NOTE 1 The argument is ignored.

            // NOTE 2 The toJSON function is intentionally generic; it does not
            // require that its this value be a Date object. Therefore, it can be
            // transferred to other kinds of objects for use as a method. However,
            // it does require that any such object have a toISOString method. An
            // object is free to use the argument key to filter its
            // stringification.
        };
    }

// ES5 15.9.4.2
// http://es5.github.com/#x15.9.4.2
// based on work shared by Daniel Friesen (dantman)
// http://gist.github.com/303249
    if (!Date.parse || "Date.parse is buggy") {
        // XXX global assignment won't work in embeddings that use
        // an alternate object for the context.
        Date = (function(NativeDate) {

            // Date.length === 7
            function Date(Y, M, D, h, m, s, ms) {
                var length = arguments.length;
                if (this instanceof NativeDate) {
                    var date = length == 1 && String(Y) === Y ? // isString(Y)
                        // We explicitly pass it through parse:
                        new NativeDate(Date.parse(Y)) :
                        // We have to manually make calls depending on argument
                        // length here
                        length >= 7 ? new NativeDate(Y, M, D, h, m, s, ms) :
                            length >= 6 ? new NativeDate(Y, M, D, h, m, s) :
                                length >= 5 ? new NativeDate(Y, M, D, h, m) :
                                    length >= 4 ? new NativeDate(Y, M, D, h) :
                                        length >= 3 ? new NativeDate(Y, M, D) :
                                            length >= 2 ? new NativeDate(Y, M) :
                                                length >= 1 ? new NativeDate(Y) :
                                                    new NativeDate();
                    // Prevent mixups with unfixed Date object
                    date.constructor = Date;
                    return date;
                }
                return NativeDate.apply(this, arguments);
            };

            // 15.9.1.15 Date Time String Format.
            var isoDateExpression = new RegExp("^" +
                "(\\d{4}|[\+\-]\\d{6})" + // four-digit year capture or sign +
                // 6-digit extended year
                "(?:-(\\d{2})" + // optional month capture
                "(?:-(\\d{2})" + // optional day capture
                "(?:" + // capture hours:minutes:seconds.milliseconds
                "T(\\d{2})" + // hours capture
                ":(\\d{2})" + // minutes capture
                "(?:" + // optional :seconds.milliseconds
                ":(\\d{2})" + // seconds capture
                "(?:(\\.\\d{1,}))?" + // milliseconds capture
                ")?" +
                "(" + // capture UTC offset component
                "Z|" + // UTC capture
                "(?:" + // offset specifier +/-hours:minutes
                "([-+])" + // sign capture
                "(\\d{2})" + // hours offset capture
                ":(\\d{2})" + // minutes offset capture
                ")" +
                ")?)?)?)?" +
                "$");

            var months = [
                0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365
            ];

            function dayFromMonth(year, month) {
                var t = month > 1 ? 1 : 0;
                return (
                    months[month] +
                        Math.floor((year - 1969 + t) / 4) -
                        Math.floor((year - 1901 + t) / 100) +
                        Math.floor((year - 1601 + t) / 400) +
                        365 * (year - 1970)
                    );
            }

            function toUTC(t) {
                return Number(new NativeDate(1970, 0, 1, 0, 0, 0, t));
            }

            // Copy any custom methods a 3rd party library may have added
            for (var key in NativeDate) {
                Date[key] = NativeDate[key];
            }

            // Copy "native" methods explicitly; they may be non-enumerable
            Date.now = NativeDate.now;
            Date.UTC = NativeDate.UTC;
            Date.prototype = NativeDate.prototype;
            Date.prototype.constructor = Date;

            // Upgrade Date.parse to handle simplified ISO 8601 strings
            Date.parse = function parse(string) {
                var match = isoDateExpression.exec(string);
                if (match) {
                    // parse months, days, hours, minutes, seconds, and milliseconds
                    // provide default values if necessary
                    // parse the UTC offset component
                    var year = Number(match[1]),
                        month = Number(match[2] || 1) - 1,
                        day = Number(match[3] || 1) - 1,
                        hour = Number(match[4] || 0),
                        minute = Number(match[5] || 0),
                        second = Number(match[6] || 0),
                        millisecond = Math.floor(Number(match[7] || 0) * 1000),
                    // When time zone is missed, local offset should be used
                    // (ES 5.1 bug)
                    // see https://bugs.ecmascript.org/show_bug.cgi?id=112
                        isLocalTime = Boolean(match[4] && !match[8]),
                        signOffset = match[9] === "-" ? 1 : -1,
                        hourOffset = Number(match[10] || 0),
                        minuteOffset = Number(match[11] || 0),
                        result;
                    if (
                        hour < (
                            minute > 0 || second > 0 || millisecond > 0 ?
                                24 : 25
                            ) &&
                            minute < 60 && second < 60 && millisecond < 1000 &&
                            month > -1 && month < 12 && hourOffset < 24 &&
                            minuteOffset < 60 && // detect invalid offsets
                            day > -1 &&
                            day < (
                                dayFromMonth(year, month + 1) -
                                    dayFromMonth(year, month)
                                )
                        ) {
                        result = (
                            (dayFromMonth(year, month) + day) * 24 +
                                hour +
                                hourOffset * signOffset
                            ) * 60;
                        result = (
                            (result + minute + minuteOffset * signOffset) * 60 +
                                second
                            ) * 1000 + millisecond;
                        if (isLocalTime) {
                            result = toUTC(result);
                        }
                        if (-8.64e15 <= result && result <= 8.64e15) {
                            return result;
                        }
                    }
                    return NaN;
                }
                return NativeDate.parse.apply(this, arguments);
            };

            return Date;
        })(Date);
    }

// ES5 15.9.4.4
// http://es5.github.com/#x15.9.4.4
    if (!Date.now) {
        Date.now = function now() {
            return new Date().getTime();
        };
    }


//
// Number
// ======
//

// ES5.1 15.7.4.5
// http://es5.github.com/#x15.7.4.5
    if (!Number.prototype.toFixed || (0.00008).toFixed(3) !== '0.000' || (0.9).toFixed(0) === '0' || (1.255).toFixed(2) !== '1.25' || (1000000000000000128).toFixed(0) !== "1000000000000000128") {
        // Hide these variables and functions
        (function () {
            var base, size, data, i;

            base = 1e7;
            size = 6;
            data = [0, 0, 0, 0, 0, 0];

            function multiply(n, c) {
                var i = -1;
                while (++i < size) {
                    c += n * data[i];
                    data[i] = c % base;
                    c = Math.floor(c / base);
                }
            }

            function divide(n) {
                var i = size, c = 0;
                while (--i >= 0) {
                    c += data[i];
                    data[i] = Math.floor(c / n);
                    c = (c % n) * base;
                }
            }

            function toString() {
                var i = size;
                var s = '';
                while (--i >= 0) {
                    if (s !== '' || i === 0 || data[i] !== 0) {
                        var t = String(data[i]);
                        if (s === '') {
                            s = t;
                        } else {
                            s += '0000000'.slice(0, 7 - t.length) + t;
                        }
                    }
                }
                return s;
            }

            function pow(x, n, acc) {
                return (n === 0 ? acc : (n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc)));
            }

            function log(x) {
                var n = 0;
                while (x >= 4096) {
                    n += 12;
                    x /= 4096;
                }
                while (x >= 2) {
                    n += 1;
                    x /= 2;
                }
                return n;
            }

            Number.prototype.toFixed = function (fractionDigits) {
                var f, x, s, m, e, z, j, k;

                // Test for NaN and round fractionDigits down
                f = Number(fractionDigits);
                f = f !== f ? 0 : Math.floor(f);

                if (f < 0 || f > 20) {
                    throw new RangeError("Number.toFixed called with invalid number of decimals");
                }

                x = Number(this);

                // Test for NaN
                if (x !== x) {
                    return "NaN";
                }

                // If it is too big or small, return the string value of the number
                if (x <= -1e21 || x >= 1e21) {
                    return String(x);
                }

                s = "";

                if (x < 0) {
                    s = "-";
                    x = -x;
                }

                m = "0";

                if (x > 1e-21) {
                    // 1e-21 < x < 1e21
                    // -70 < log2(x) < 70
                    e = log(x * pow(2, 69, 1)) - 69;
                    z = (e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1));
                    z *= 0x10000000000000; // Math.pow(2, 52);
                    e = 52 - e;

                    // -18 < e < 122
                    // x = z / 2 ^ e
                    if (e > 0) {
                        multiply(0, z);
                        j = f;

                        while (j >= 7) {
                            multiply(1e7, 0);
                            j -= 7;
                        }

                        multiply(pow(10, j, 1), 0);
                        j = e - 1;

                        while (j >= 23) {
                            divide(1 << 23);
                            j -= 23;
                        }

                        divide(1 << j);
                        multiply(1, 1);
                        divide(2);
                        m = toString();
                    } else {
                        multiply(0, z);
                        multiply(1 << (-e), 0);
                        m = toString() + '0.00000000000000000000'.slice(2, 2 + f);
                    }
                }

                if (f > 0) {
                    k = m.length;

                    if (k <= f) {
                        m = s + '0.0000000000000000000'.slice(0, f - k + 2) + m;
                    } else {
                        m = s + m.slice(0, k - f) + '.' + m.slice(k - f);
                    }
                } else {
                    m = s + m;
                }

                return m;
            }
        }());
    }


//
// String
// ======
//


// ES5 15.5.4.14
// http://es5.github.com/#x15.5.4.14

// [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
// Many browsers do not split properly with regular expressions or they
// do not perform the split correctly under obscure conditions.
// See http://blog.stevenlevithan.com/archives/cross-browser-split
// I've tested in many browsers and this seems to cover the deviant ones:
// 'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
// '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
// 'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
// [undefined, "t", undefined, "e", ...]
// ''.split(/.?/) should be [], not [""]
// '.'.split(/()()/) should be ["."], not ["", "", "."]

    var string_split = String.prototype.split;
    if (
        'ab'.split(/(?:ab)*/).length !== 2 ||
            '.'.split(/(.?)(.?)/).length !== 4 ||
            'tesst'.split(/(s)*/)[1] === "t" ||
            ''.split(/.?/).length ||
            '.'.split(/()()/).length > 1
        ) {
        (function () {
            var compliantExecNpcg = /()??/.exec("")[1] === void 0; // NPCG: nonparticipating capturing group

            String.prototype.split = function (separator, limit) {
                var string = this;
                if (separator === void 0 && limit === 0)
                    return [];

                // If `separator` is not a regex, use native split
                if (Object.prototype.toString.call(separator) !== "[object RegExp]") {
                    return string_split.apply(this, arguments);
                }

                var output = [],
                    flags = (separator.ignoreCase ? "i" : "") +
                        (separator.multiline ? "m" : "") +
                        (separator.extended ? "x" : "") + // Proposed for ES6
                        (separator.sticky ? "y" : ""), // Firefox 3+
                    lastLastIndex = 0,
                // Make `global` and avoid `lastIndex` issues by working with a copy
                    separator = new RegExp(separator.source, flags + "g"),
                    separator2, match, lastIndex, lastLength;
                string += ""; // Type-convert
                if (!compliantExecNpcg) {
                    // Doesn't need flags gy, but they don't hurt
                    separator2 = new RegExp("^" + separator.source + "$(?!\\s)", flags);
                }
                /* Values for `limit`, per the spec:
                 * If undefined: 4294967295 // Math.pow(2, 32) - 1
                 * If 0, Infinity, or NaN: 0
                 * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
                 * If negative number: 4294967296 - Math.floor(Math.abs(limit))
                 * If other: Type-convert, then use the above rules
                 */
                limit = limit === void 0 ?
                    -1 >>> 0 : // Math.pow(2, 32) - 1
                    limit >>> 0; // ToUint32(limit)
                while (match = separator.exec(string)) {
                    // `separator.lastIndex` is not reliable cross-browser
                    lastIndex = match.index + match[0].length;
                    if (lastIndex > lastLastIndex) {
                        output.push(string.slice(lastLastIndex, match.index));
                        // Fix browsers whose `exec` methods don't consistently return `undefined` for
                        // nonparticipating capturing groups
                        if (!compliantExecNpcg && match.length > 1) {
                            match[0].replace(separator2, function () {
                                for (var i = 1; i < arguments.length - 2; i++) {
                                    if (arguments[i] === void 0) {
                                        match[i] = void 0;
                                    }
                                }
                            });
                        }
                        if (match.length > 1 && match.index < string.length) {
                            Array.prototype.push.apply(output, match.slice(1));
                        }
                        lastLength = match[0].length;
                        lastLastIndex = lastIndex;
                        if (output.length >= limit) {
                            break;
                        }
                    }
                    if (separator.lastIndex === match.index) {
                        separator.lastIndex++; // Avoid an infinite loop
                    }
                }
                if (lastLastIndex === string.length) {
                    if (lastLength || !separator.test("")) {
                        output.push("");
                    }
                } else {
                    output.push(string.slice(lastLastIndex));
                }
                return output.length > limit ? output.slice(0, limit) : output;
            };
        }());

// [bugfix, chrome]
// If separator is undefined, then the result array contains just one String,
// which is the this value (converted to a String). If limit is not undefined,
// then the output array is truncated so that it contains no more than limit
// elements.
// "0".split(undefined, 0) -> []
    } else if ("0".split(void 0, 0).length) {
        String.prototype.split = function(separator, limit) {
            if (separator === void 0 && limit === 0) return [];
            return string_split.apply(this, arguments);
        }
    }


// ECMA-262, 3rd B.2.3
// Note an ECMAScript standart, although ECMAScript 3rd Edition has a
// non-normative section suggesting uniform semantics and it should be
// normalized across all browsers
// [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE
    if ("".substr && "0b".substr(-1) !== "b") {
        var string_substr = String.prototype.substr;
        /**
         * Get the substring of a string
         * @param {integer} start where to start the substring
         * @param {integer} length how many characters to return
         * @return {string}
         */
        String.prototype.substr = function(start, length) {
            return string_substr.call(
                this,
                start < 0 ? ((start = this.length + start) < 0 ? 0 : start) : start,
                length
            );
        }
    }

// ES5 15.5.4.20
// whitespace from: http://es5.github.io/#x15.5.4.20
    var ws = "\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003" +
        "\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028" +
        "\u2029\uFEFF";
    if (!String.prototype.trim || ws.trim()) {
        // http://blog.stevenlevithan.com/archives/faster-trim-javascript
        // http://perfectionkills.com/whitespace-deviations/
        ws = "[" + ws + "]";
        var trimBeginRegexp = new RegExp("^" + ws + ws + "*"),
            trimEndRegexp = new RegExp(ws + ws + "*$");
        String.prototype.trim = function trim() {
            if (this === void 0 || this === null) {
                throw new TypeError("can't convert "+this+" to object");
            }
            return String(this)
                .replace(trimBeginRegexp, "")
                .replace(trimEndRegexp, "");
        };
    }

// ES-5 15.1.2.2
    if (parseInt(ws + '08') !== 8 || parseInt(ws + '0x16') !== 22) {
        parseInt = (function (origParseInt) {
            var hexRegex = /^0[xX]/;
            return function parseIntES5(str, radix) {
                str = String(str).trim();
                if (!+radix) {
                    radix = hexRegex.test(str) ? 16 : 10;
                }
                return origParseInt(str, radix);
            };
        }(parseInt));
    }

//
// Util
// ======
//

// ES5 9.4
// http://es5.github.com/#x9.4
// http://jsperf.com/to-integer

    function toInteger(n) {
        n = +n;
        if (n !== n) { // isNaN
            n = 0;
        } else if (n !== 0 && n !== (1/0) && n !== -(1/0)) {
            n = (n > 0 || -1) * Math.floor(Math.abs(n));
        }
        return n;
    }

    function isPrimitive(input) {
        var type = typeof input;
        return (
            input === null ||
                type === "undefined" ||
                type === "boolean" ||
                type === "number" ||
                type === "string"
            );
    }

    function toPrimitive(input) {
        var val, valueOf, toString;
        if (isPrimitive(input)) {
            return input;
        }
        valueOf = input.valueOf;
        if (typeof valueOf === "function") {
            val = valueOf.call(input);
            if (isPrimitive(val)) {
                return val;
            }
        }
        toString = input.toString;
        if (typeof toString === "function") {
            val = toString.call(input);
            if (isPrimitive(val)) {
                return val;
            }
        }
        throw new TypeError();
    }

// ES5 9.9
// http://es5.github.com/#x9.9
    var toObject = function (o) {
        if (o == null) { // this matches both null and undefined
            throw new TypeError("can't convert "+o+" to object");
        }
        return Object(o);
    };

});
define('simple',['require','jquery','../lib/es5-shim'],function (require) {

	var $ = require('jquery');
	require('../lib/es5-shim');

	if (typeof Simple === 'undefined') {
		window.Simple = {};
	}

	$.extend(Simple, {

		namespace : function () {
			var a = arguments,
			o = this,
			i = 0,
			j,
			d,
			arg;
			for (; i < a.length; i++) {
				arg = a[i];
				if (arg.indexOf(".")) {
					d = arg.split(".");
					for (j = (d[0] == 'Simple') ? 1 : 0; j < d.length; j++) {
						o[d[j]] = o[d[j]] || {};
						o = o[d[j]];
					}
				} else {
					o[arg] = o[arg] || {};
				}
			}
			return o;
		},
		extend : function (subCls, superCls) {
			var F = function () {},
			subClsProp;
			F.prototype = superCls.prototype;
			subClsProp = subCls.prototype = new F();
			subCls.prototype.constructor = subCls;
			subCls.superclass = superCls.prototype;
			return subCls;
		},
		assert : function (condition, message) {
			if (condition) {
				throw new Error(message);
			}
		},
		/**
		 * 获取元素的 left top right bottom
		 *
		 * @method getCoordinates
		 * @param {Object} element 需要获取位置的对象
		 * @return {Object} 返回对象的left top right bottom值
		 */
		getCoordinates : function (element) {
			var coor;
			element = $(element);
			if (element.length < 1) {
				return {};
			}
			var offset = element.offset(),
			right = element.outerWidth() + offset.left,
			bottom = element.outerHeight() + offset.top;

			coor = $.extend({
					right : right,
					bottom : bottom
				}, offset);

			return coor;
		},
		/**
		 * 获取元素的包含边框的width height值
		 *
		 * @method getOuterDimensions
		 * @param {Object} element 需要获取位置的对象
		 * @return {Object} 返回对象包含边框的width height值
		 */
		getOuterDimensions : function (element) {

			element = $(element);

			if (element.is('body')) {
				return this.getClient();
			}
			return {
				width : element.outerWidth(),
				height : element.outerHeight()
			};
		},
		/**
		 * 获取当前视窗的滚动位置
		 *
		 * @method getScroll
		 * @return {Object} 返回对象的left top
		 */
		getScroll : function () {
			return {
				left : Math.max(document.documentElement.scrollLeft, document.body.scrollLeft),
				top : Math.max(document.documentElement.scrollTop, document.body.scrollTop)
			}
		},
		/**
		 * 获取当前页面的宽高(加上滚动条部分)
		 * @return {Object} Object.h 高度
		 * @return {Object} Object.w 宽度
		 */
		getDoc : function () {
			return {
				width : Math.max(document.documentElement.scrollHeight, document.documentElement.clientHeight),
				height : Math.max(document.documentElement.scrollWidth, document.documentElement.clientWidth)
			}
		},
		/**
		 * 获取当前页面的可视宽高
		 * @return {Object} Object.h 高度
		 * @return {Object} Object.w 宽度
		 */
		getClient : function () {
			return {
				height : document.documentElement.clientHeight,
				width : document.documentElement.clientWidth
			}
		},
		/**
		 * 替换字符串的辅助函数
		 * @param {Object} template
		 * @param {Object} map
		 * @param {Object} beforeReplace
		 * @return 替换后的字符串
		 */
		replace : function (template, map, beforeReplace) {
			return template.replace(/\{\{([^\s\:\}]+)(?:\:([^\s\:\}]+))?\}\}/g, function (match, key) {
				var value = map[key];
				return beforeReplace(value, key).toString();
			});
		},
		/**
		 * 将Simple下的插件桥接到jQuery
		 * @param methodName {String} 插件名称
		 * @param widget {Object} 对应的插件
		 */
		bridgeTojQuery : function (methodName, widget) {
			var methodArray = methodName.split(",");
			$.each(methodArray, function (i, n) {
				$.fn[n] = function (config) {
					return this.each(function () {
						if (config == "destroy") {
							if ($.data(this, "widget-" + n)) {
								$.data(this, "widget-" + n).destroy();
								$(this).removeData("widget-" + n);
								return;
							} else {
								return true;
							}
						}
						config = config || {};
						config = $.extend(config, {
								node : this
							});
						//不要重复绑定
						if ($.data(this, "widget-" + n)) {
							return;
						}
						var widgetInc = new widget(config);
						$.data(this, "widget-" + n, widgetInc);
					});
				}
			});
		}
	});

	return Simple;

});

/**
 * @module declare
 */
define('declare',['require','jquery','./simple'],function (require) {

	var $ = require('jquery'),
	S = require('./simple'),
	getUniqueArray = function (arr) {
		var _metaBase = {},
		_tempBase = [];
		$.each(arr, function (index, item) {
			if (!_metaBase[item]) {
				_tempBase.push(item);
				_metaBase[item] = item;
			}
		});
		_metaBase = null;
		return _tempBase;
	},
	_crackName = function (name) {
		var index = name.lastIndexOf("."),
		clsName,
		o,
		args;
		if (index != -1) {
			args = name.substring(0, index);
			o = S.namespace(args);
			clsName = name.substring(index + 1, name.length);
		} else {
			clsName = name;
			o = S;
		}
		return {
			clsName : clsName,
			namespace : o
		};
	};

	/**
	 * 定义一个基础类，并且遍历指定的对象，拷贝到类的原型链上，并且调用原型链上的init的方法进行初始化。
	 * 如果指定父类，则该类会继承于这个父类，并且可以使用inherit来便捷调用父级方法.
	 *
	 *     var Animal = declare({
	 *         getName:function(){
	 *             return 'animal';
	 *         }
	 *     });
	 *     var Bird = declare(Animal,{
	 *         getName:function(){
	 *             var superResult = this.inherit(arguments);
	 *             return superResult + ' bird';
	 *         }
	 *     });
	 *     console.log(new Bird().getName());//will console animal bird
	 *
	 * @method declare
	 * @static
	 * @param {String} name 定义构造函数的名字
	 * @param {Array | Function} superCls 定义构造函数需要继承的父类
	 * @param {Object} props 定义构造函数的原型链属性
	 * @return 定义后的构造函数
	 */
	var declare = function (name, superCls, props) {

		var args = arguments,
		clsInfo;

		S.assert(args.length < 1, '请至少指定一个变量作为[declare]接收的参数！');

		if (args.length == 1) {
			props = name;
			superCls = null;
			name = null;
		} else if (args.length == 2) {
			if (typeof name === 'string') {
				props = superCls;
				superCls = null;
			} else {
				props = superCls;
				superCls = name;
				name = null;
			}
		}
		//生成构造函数
		var subCls = function (config) {
			$.extend(this, config);
			var base = subCls._meta.base;
			if (base.length) {
				for (var i = base.length - 1; i >= 0; i--) {
					base[i].apply(this, arguments);
				}
			}
		};

		if (name) {
			clsInfo = _crackName(name);
			//生成构造函数
			clsInfo.namespace[clsInfo.clsName] = subCls;
		}

		subCls._meta = {
			base : [props.init ||
				function () {}

			],
			parents : [],
			superclass : {}
		};

		if (superCls) {
			if (!(superCls instanceof Array)) {
				superCls = [superCls];
			}
			//继承第一个父类
			S.extend(subCls, superCls[0]);
			//按照逆序序拷贝聚合类的构造函数
			for (var i = superCls.length - 1; i >= 0; i--) {
				if (superCls[i]._meta.base.length) {
					$.each(superCls[i]._meta.base, function (index, item) {
						subCls._meta.base.push(item);
					});
				}
				subCls._meta.parents.push(superCls[i].prototype.init);
			}
			//将base类去重处理
			subCls._meta.base = getUniqueArray(subCls._meta.base);

			////按照顺序拷贝聚合类的原型链
			for (var i = 0; i < superCls.length; i++) {
				$.extend(subCls._meta.superclass, superCls[i].prototype);
				$.extend(subCls.prototype, superCls[i].prototype);
			}
		}

		$.each(props, function (prop, value) {
			//sepical object handle
			if (prop === 'events') {
				subCls.prototype.events = $.extend(true, {}, subCls.prototype.events, value);
			} else {
				subCls.prototype[prop] = value;
			}
			if (typeof value === 'function') {

				subCls.prototype[prop] = (function () {
					var inherit = function () {
						return superCls[0].prototype[prop].apply(this, arguments);
					},
					inheritApply = function (args) {
						return superCls[0].prototype[prop].apply(this, args);
					};
					return function () {
						var _inherit = this.inherit,
						_inheritApply = this.inheritApply,
						returnValue;
						this.inherit = inherit;
						this.inheritApply = inheritApply;
						returnValue = value.apply(this, arguments);
						this.inherit = _inherit;
						this.inheritApply = _inheritApply;
						return returnValue;
					};
				})();
			}
		});
		subCls.prototype.constructor = subCls;
		return subCls;
	};

	S.declare = declare;

	return declare;
});

define('events',['require','./declare','./simple'],function (require) {

    var declare = require('./declare'),
        S = require('./simple');


    //dojo/aspect

    var undefined, nextId = 0;
    function advise(dispatcher, type, advice, receiveArguments){
        var previous = dispatcher[type];
        var around = type == "around";
        var signal;
        if(around){
            var advised = advice(function(){
                return previous.advice(this, arguments);
            });
            signal = {
                remove: function(){
                    if(advised){
                        advised = dispatcher = advice = null;
                    }
                },
                advice: function(target, args){
                    return advised ?
                        advised.apply(target, args) :  // called the advised function
                        previous.advice(target, args); // cancelled, skip to next one
                }
            };
        }else{
            // create the remove handler
            signal = {
                remove: function(){
                    if(signal.advice){
                        var previous = signal.previous;
                        var next = signal.next;
                        if(!next && !previous){
                            delete dispatcher[type];
                        }else{
                            if(previous){
                                previous.next = next;
                            }else{
                                dispatcher[type] = next;
                            }
                            if(next){
                                next.previous = previous;
                            }
                        }

                        // remove the advice to signal that this signal has been removed
                        dispatcher = advice = signal.advice = null;
                    }
                },
                id: nextId++,
                advice: advice,
                receiveArguments: receiveArguments
            };
        }
        if(previous && !around){
            if(type == "after"){
                // add the listener to the end of the list
                // note that we had to change this loop a little bit to workaround a bizarre IE10 JIT bug
                while(previous.next && (previous = previous.next)){}
                previous.next = signal;
                signal.previous = previous;
            }else if(type == "before"){
                // add to beginning
                dispatcher[type] = signal;
                signal.next = previous;
                previous.previous = signal;
            }
        }else{
            // around or first one just replaces
            dispatcher[type] = signal;
        }
        return signal;
    }
    function aspect(type){
        return function(target, methodName, advice, receiveArguments){
            var existing = target[methodName], dispatcher;
            if(!existing || existing.target != target){
                // no dispatcher in place
                target[methodName] = dispatcher = function(){
                    var executionId = nextId;
                    // before advice
                    var args = arguments;
                    var before = dispatcher.before;
                    while(before){
                        args = before.advice.apply(this, args) || args;
                        before = before.next;
                    }
                    // around advice
                    if(dispatcher.around){
                        var results = dispatcher.around.advice(this, args);
                    }
                    // after advice
                    var after = dispatcher.after;
                    while(after && after.id < executionId){
                        if(after.receiveArguments){
                            var newResults = after.advice.apply(this, args);
                            // change the return value only if a new value was returned
                            results = newResults === undefined ? results : newResults;
                        }else{
                            results = after.advice.call(this, results, args);
                        }
                        after = after.next;
                    }
                    return results;
                };
                if(existing){
                    dispatcher.around = {advice: function(target, args){
                        return existing.apply(target, args);
                    }};
                }
                dispatcher.target = target;
            }
            var results = advise((dispatcher || existing), type, advice, receiveArguments);
            advice = null;
            return results;
        };
    }

    var Aspect = {
        before: aspect('before'),
        around: aspect('around'),
        after: aspect('after')
    };

    S.aspect = Aspect;

    var idCounter = 0,
        PREFIX = '_',
        PREFIX_REG_EXP = new RegExp('^' + PREFIX + '+'),
        EVENTS_SPLIT = '.';

    var uniqueId = function (prefix) {
        var id = ++idCounter + '';
        return prefix ? prefix + id : id;
    };

    /**
     * 为SimpleUI提供基本的事件支持，简化事件操作流程，提升响应速度，
     * 并且针对SimpleUI的组件特性加入了对node节点的disabled嗅探
     *
     *  * 支持二级命名空间事件命名
     *  * 支持面向切面的事件编程,该类被设计为用于继承的基类。
     *
     * @module event
     * @class Simple.Event
     */
    var Event = declare('Event', {
        init: function () {
            this._events = {};
        },
        /**
         * 事件监听，绑定指定自定义事件名，在事件触发时执行相应的回调函数。可通过传入`all`来绑定所有自定义事件。
         *
         * @param  {String}   events   自定义事件名，多个用空格隔开
         * @param  {Function} callback 事件回调
         * @param  {Object}   context  事件作用域
         * @return {Object}            当前对象
         */
        on: function (events, callback, context) {
            var src, uid, evt, tail, name;

            this._events = this._events || {};
            events = events.split(/\s+/);

            while ((evt = events.shift())) {
                src = evt;
                evt = evt.split(EVENTS_SPLIT);
                if (typeof callback === 'function') {
                    uid = uniqueId(PREFIX);
                    tail = this._events;
                    while (typeof(name = evt.shift()) !== 'undefined') {
                        name = name.replace(PREFIX_REG_EXP, '');
                        if (name) {
                            tail[name] = tail[name] || {};
                            tail[name][uid] = {
                                _by: src,
                                fn: callback,
                                ctx: context || this
                            };
                            tail = tail[name];
                        } else {
                            continue;
                        }
                    }
                }
            }

            return this;
        },
        /**
         * 事件解绑／取消监听，移除一个或多个事件的监听。如果`context`为空。
         *
         * @param  {String}   events   自定义事件名，多个用空格隔开
         * @param  {Function} callback 事件回调
         */
        off: function (events, callback) {
            var evt, tail, name, src, k, last,
                offNames = {};
            if (!events) {
                this._events = {};
                return this;
            }
            this._events = this._events || {};
            events = events.split(/\s+/);
            while ((evt = events.shift())) {
                src = evt;
                evt = evt.split(EVENTS_SPLIT);
                tail = this._events;

                head = tail[evt.shift()];

                for (k in head) {
                    if (head.hasOwnProperty(k) && k.match(PREFIX_REG_EXP)) {
                        if (typeof callback === 'function') {
                            if (head[k].fn === callback && head[k]._by.indexOf(src) === 0) {
                                offNames[k] = head[k]._by.split(EVENTS_SPLIT);
                            }
                        } else {
                            if (head[k]._by.indexOf(src) === 0) {
                                offNames[k] = head[k]._by.split(EVENTS_SPLIT);
                            }
                        }
                    }
                }

                for (k in offNames) {
                    if (offNames.hasOwnProperty(k)) {
                        tail = this._events;
                        last = offNames[k].pop();
                        while ((name = offNames[k].shift())) {
                            if (tail[name]) {
                                delete tail[name][k];
                            }
                            tail = tail[name];
                        }
                        if (tail) {
                            delete tail[last];
                        }
                    }
                }
            }
            return this;
        },
        /**
         * 抛出一个或多个自定义事件，触发回调函数。
         * 通过`object.trigger(event, [*args])`的方式，追加的`args`可作为参数传递给`callback`。
         *
         * @param  {Object} events 自定义事件名，多个用空格隔开
         * @return {Object}        当前对象
         */
        trigger: function (events) {
            var args = [].slice.call(arguments, 1),
                type, evt, tail, name, k;

            this._events = this._events || {};
            events = events.split(/\s+/);
            while ((evt = events.shift())) {
                type = evt;
                evt = evt.split(EVENTS_SPLIT);
                tail = this._events;
                while (typeof(name = evt.shift()) !== 'undefined') {
                    tail = tail && tail[name];
                }

                for (k in tail) {

                    if (tail.hasOwnProperty(k) && k.match(PREFIX_REG_EXP)) {
                        return tail[k].fn.apply(tail[k].ctx, args.concat({
                            type: type,
                            currentType: tail[k]._by
                        }));
                    }
                }
            }

        },
        /**
         * 在一个方法之后执行callback
         * @param method
         * @param callback
         */
        after: function (method, callback) {
            return Aspect.after(this, method, callback);
        },
        /**
         * 在一个方法之前执行callback
         * @param method
         * @param callback
         */
        before: function (method, callback) {
            return Aspect.before(this, method, callback);
        },
        around: function (method, callback) {
            return Aspect.around(this, method, callback);
        }
    });

    return Event;
});







/**
 * @module attribute
 */
define('attribute',['require','./events','./declare','jquery'],function (require) {

    var Event = require('./events'),
        declare = require('./declare'),
        $ = require('jquery');

    var methodToUpperCase = function (key) {
        return key.charAt(0).toUpperCase() + key.substr(1);
    };


    /**
     * SimpleUI的属性类，该类被设计为用于混合的基类，用于为类的属性提供get，set支持。
     * @class Simple.Attribute
     * @extends Simple.Event
     */
    return  declare('Attribute', Event, {
        /**
         * 获取某个key值，该值可以通过自定义的一个方法改变
         * 例如如果key为Name，那么复写getName方法可以改变取到的值
         *    _getterName:function(value){
         * 		return Math.min(value,0);
         * }
         * @method get
         * @param {String} key
         * @return {Object} 该key所对应的值
         */
        get: function (key) {
            var method = '_getter' + methodToUpperCase(key);

            if (typeof this[method] === 'function') {
                return this[method](this[key]);
            }
            return this[key];
        },
        /**
         * 设置某个key的值
         * 其次该值可以通过定义的一个方法改变值
         * 最后如果设置成功，会触发keyChange 事件
         * @method set
         * @param {String} key
         * @param {Object} value
         * @param {Object} options
         * @return this
         */
        set: function (key, value, options) {

            if (typeof key === 'object') {
                $.each(key, function (name,value) {
                    this.set(name, key[name], options);
                }.bind(this));
                return this;
            }

            var method = '_setter' + methodToUpperCase(key),
                args = Array.prototype.slice.call(arguments, 1),
                result,
                options = options || {},
                oldValue = this.get(key),
                promise = function(){
                    var newValue = this.get(key);
                    if (options.forceEvent || (oldValue !== newValue && !options.disableEvent)) {
                        this.trigger('attrchange', key, newValue, oldValue);
                        this.trigger(key+'Change', newValue, oldValue);
                    }
                }.bind(this);


            if (typeof this[method] === 'function') {
                result = this[method].apply(this, args);
            } else {
                this[key] = value;
            }
            if(result){
                $.when(result,promise);
            }else{
                promise();
            }
            return this;
        },

        _bindAttrChange: function(){
            this.on('attrchange',function(key, newValue, oldValue){
                var attrchangeMethod = this['_uiSet'+methodToUpperCase(key)];
                if(typeof attrchangeMethod == 'function'){
                    attrchangeMethod.apply(this, [newValue, oldValue]);
                }
            });
        }
    });
});

/**
 * @module _container
 */
define('_container',['require','./declare'],function(require){

    var declare = require('./declare');

    /**
     * 用于管理组件之间的父子级关系
     * @class Simple._Container
     */
    return declare('_Container',{

        childs:[],
		
		init: function(){
			this._childsInc = this._childsInc || [];
            this._virtualChildsInc = this._virtualChildsInc || [];
            this._childsIncByKey = this._childsIncByKey || {};
		},

        renderChilds: function(){
            var  childs = this.get('childs');

            childs.forEach(function(child){
                var ctor = child.ctor;
                if(child.placeHolderContainer){
                    child.container = this.el.find(child.placeHolderContainer);
                }else{
                    child.container = this.el;
                }
                var childInc = new ctor(child);
                this.addChild(childInc,false);

            }.bind(this));
        },
        /**
         * 添加一个孩子对象
         * @param item 添加的对象
         * @param append 是否添加元素dom，如果不添加的话则为逻辑上的父子级关系
         */
        addChild: function (item, append) {
            if (typeof append === 'undefined') {
                append = true;
            }
            item._parent = this;
            if (append && item.el) {
                this.el.append(item.el);
            }
            if (!this._childsIncByKey[item.get('id')]) {
                this._childsIncByKey[item.get('id')] = item;
                this._childsInc.push(item);
            }
            return this;
        },
        
        removeChild: function(id){
            var currentIndex;
            this.getChildren().forEach(function(item,index){
                if(item.get('id') == id){
                    currentIndex = index;
                }
            });
            this.getChildren().splice(index,1);
            delete this._childsIncByKey[id];

            return this;
        },
        /**
         * 获取所有孩子节点
         * @returns {*|Array}
         */
        getChildren:function(id){
            if(id){
                return this._childsIncByKey[id];
            }
            return this._childsInc;
        },

        /**
         * 获取父级对象
         * @param id 根据id获取父级对象
         * @param strict 是否严格匹配
         * @return 匹配到的父级对象
         */
        getParent: function (id, strict) {
            if (!id) {
                return this._parent;
            } else {
                var parent = this._parent;
                if (strict) {
                    while (parent && parent.get('id') !== id) {
                        parent = parent._parent;
                    }
                } else {
                    while (parent && parent.get('id').indexOf(id) === -1) {
                        parent = parent._parent;
                    }
                }
                return parent;
            }
        },
		
        /**
         * 获取当前对象的下个节点
         * @returns {*}
         */
        getNext: function () {
            var parent = this.getParent(),
                children,
                self = this,
                currentIndex;

            if (parent) {
                children = parent.getChildren();
                children.forEach(function (child, index) {
                    if (child === self) {
                        currentIndex = index;
                        return false;
                    }
                });
                if (currentIndex != null) {
                    if (children[currentIndex + 1]) {
                        return  children[currentIndex + 1];
                    } else {
                        return false;
                    }
                } else {
                    return false;
                }
            }
            return false;
        },
        /**
         * 获取当前对象的上个节点
         * @returns {*}
         */
        getPrev: function () {
            var parent = this.getParent(),
                children,
                self = this,
                currentIndex;
            if (parent) {
                children = parent.getChildren();
                children.forEach(function (child, index) {
                    if (child === self) {
                        currentIndex = index;
                        return false;
                    }
                });
                if (currentIndex != null) {
                    if (children[currentIndex - 1]) {
                        return  children[currentIndex - 1];
                    } else {
                        return false;
                    }
                } else {
                    return false;
                }

            }
            return false;
        },
        /**
         * 获取根节点
         * @returns {_Container|*}
         */
        root: function () {
            var parent = this._parent;
            while (parent && parent._parent) {
                parent = parent._parent;
            }
            return parent;
        }
    });
});
define('widget',['require','jquery','./attribute','./declare','./_container'],function (require) {

    var $ = require('jquery'),
        Attribute = require('./attribute'),
        declare = require('./declare'),
        _Container = require('./_container');


    var uuid = 0,
        _getId = function () {
            return 'widget-' + (uuid++)
        },
        Widget;

    /**
     * 继承自Attribute类，为所有的SimpleUI的UI组件提供基类支持，
     * 拥有`init`,`render`,`destroy`生命周期.
     * 这个基类提供了很多可以复写的方法，可以方便的实现自定义行为，从而降低工作量.
     *
     * >该类被设计为用于继承的基类，通常不会被直接实例化
     *
     * @module widget
     * @extends Simple.Attribute
     * @class Simple.Widget
     */
    Widget = declare('Widget', [Attribute, _Container], {

        name: 'Widget',

        /**
         * 该Id也为实例化后可以根据此ID获取实例对象 如果没有指定，则会自动生成一个Id，格式为widget-uuid
         *
         * @property id
         * @type String
         * @default ''
         */
        id: '',
        /**
         * 触发该widget操作的node
         *
         * @property node
         * @type String
         * @default null
         */
        node: '',
        /**
         * ui渲染的位置
         *
         * @property container
         * @type String
         * @default ''
         */
        container: '',
        /**
         * 为生成的el添加的类
         *
         * @property className
         * @type String
         * @default ''
         */
        className: '',
        /**
         * 为container指定的类名
         *
         * @property containerClass
         * @type String
         * @default ''
         */
        containerClass: '',
        /**
         * 当没有指定container时，创建container时使用的标签
         * @property tagName
         * @type String
         * @default 'div'
         */
        tagName: 'div',
        /**
         * 该widget组件需要使用的模版，可以通过外部加载
         *
         * @property template
         * @type String
         * @default ''
         */
        template: '',
        /**
         * 通过bindUI为该组件绑定事件
         *
         * @type Object
         * @property {Object} events
         */
        events: null,
        /**
         * 为该生成的el设定的样式
         *
         * @property style
         * @type Object
         */
        style: '',
        /**
         * 为该生成的el设定属性
         * @property style
         * @type Object
         */
        attr: '',
        /**
         * 初始化widget
         * @method init
         */
        init: function () {
            this.node = this.get('node');
            this.container = this.get('container');
            if (!this.get('id')) {
                this.set('id', _getId());
            }
            this.initAttrs();
            this.initBaseEvents();
            this._deferred = $.Deferred();
            this._bindAttrChange();
            if (this.container) {
                this.render();
            }
        },
        /**
         * 取得指定的node
         *
         * @method _getterTrigger
         * @protected
         */
        _getterNode: function (node) {
            return $(node);
        },
        /**
         * 取得渲染的容器
         *
         * @method _getterContainer
         * @protected
         */
        _getterContainer: function (node) {
            if (node) {
                return $(node).addClass(this.get('containerClass'));
            }
            return null;
        },
        /**
         * 用于自动生成容器的方法， 在没有渲染且没有指定容器的方法在会调用此方法
         *
         * @method _autoBuildContainer
         * @protected
         */
        _autoBuildContainer: function () {
            var node = $('<' + this.get('tagName') + '>');
            node.addClass(this.get('containerClass'));
            node.appendTo(document.body);
            // 标识是否是自动生成的dom，在destroy的时候移除掉
            this._autoContainer = true;
            this.set('container', node);
        },
        /**
         * 初始化一些特殊的属性，所有在这里初始化的属性都会被插件类捕捉到
         * @method initAttrs
         */
        initAttrs: $.noop,
        /**
         * 如果该组件是延迟渲染的，则针对el的事件绑定在这里进行
         *
         * @method initBaseEvents
         */
        initBaseEvents: $.noop,


        /**
         * 对组件进行渲染
         *
         * @method render
         * @param container {String | HTMLElement} 指定渲染到的容器
         */
        render: function (container) {

            if (!this._rendered) {
                if (container) {
                    this.set('container', $(container));
                } else {
                    if (!this.get('container')) {
                        this._autoBuildContainer();
                    }
                }
                this.createElement();
                this.buildRender();
                this._linkPropFromElement();
                this._linkAttrToElement();
                this._renderUI();
                this.renderUI();
                this._delegateEvents();
                this._bindUI();
                this.bindUI();
                this.el.removeClass('sui-hidden');
                this._rendered = true;
            }else{
                this.get('container').append(this.el);
            }
            return this;
        },
        /**
         * 通过该方法判断该组件是否已渲染
         *
         * @method isRender
         * @return 组件是否渲染
         */
        isRender: function () {
            return !!this._rendered;
        },

        createElement: function () {
            var template = this.get('template');
            if (template) {
                this.el = $(this.get('template'));
            } else {
                this.el = this.container;
            }
        },
        /**
         * 构建渲染的主体，在这里会进行模版的解析。
         *
         * @method buildRender
         * @protected
         */
        buildRender: function () {
            var attrs = this.get('attr').split(/\s*,\s*/),
                attr;
            if (this.el.length > 1) {
                this.el = this.el.eq(0);
            }
            this.el.attr('id', this.get('id'))
                .attr('role', this.get('name').toLowerCase());
            this.el.addClass(this.get('className') + ' sui-hidden');
            this.el.css(this.get('style'));
            while ((attr = attrs.shift())) {
                attr = attr.split(/\s*=\s*/);
                if (attr && attr[0]) {
                    this.el.attr(attr[0], attr[1] || '');
                }
            }
            this.container.append(this.el);
        },

        _linkAttrToElement: function () {
            $.each(this, function (key, value) {
                var method = this['_uiSet' + key.charAt(0).toUpperCase() + key.substr(1)];
                if (key.charAt(0) != '_' && typeof method === 'function') {
                    method.call(this, this.get(key));
                }
            }.bind(this));
        },

        _linkPropFromElement: function () {
            this._widgetRoles = this.el.find('[data-role]').andSelf();
            $.each(this._widgetRoles, function (index, el) {
                var widgetRole = el.getAttribute('data-role');
                if (widgetRole) {
                    this[widgetRole] = $(el);
                }
            }.bind(this));
        },

        _renderUI: function () {
        },
        /**
         * 空方法，用于组件的复写
         *
         * @method renderUI
         */
        renderUI: function () {

        },
        _bindUI: function () {
        },
        /**
         * 空方法，用于事件的绑定
         * @method bindUI
         */
        bindUI: function () {

        },
        unbindUI: function () {

        },
        /**
         * 禁用这个组件
         * @method disable
         */
        disable: function () {
            this.set('disabled', true);
        },
        /**
         * 启用这个组件
         * @method enable
         */
        enable: function () {
            this.set('disabled', false);
        },
        /**
         * 聚焦到这个组件
         * @method focus
         */
        focus: function () {
            this.set('focusAttr', true);
        },
        /**
         * @method blur
         */
        blur: function () {
            this.set('focusAttr', false);
        },

        _uiSetDisabled: function (disabled) {
            if (disabled) {
                this.el.addClass('sui-state-disabled');
                this.el.attr({
                    'aria-disabled': true,
                    'disabled': true
                });
            } else {
                this.el.removeClass('sui-state-disabled');
                this.el.removeAttr('aria-disabled').removeAttr('disabled');
            }

        },

        _uiSetFocusAttr: function (focus) {
            if (!this.get('disabled')) {
                if (focus && this.focusNode) {
                    this.focusNode.addClass('sui-state-focus');
                } else {
                    this.focusNode.removeClass('sui-state-focus');
                }
            }
        },

        /**
         * 显示该组件，如果该组件没有被渲染，则先渲染该组件，再显示
         *
         * @method show
         */
        show: function () {
            if (!this.isRender()) {
                this.render(document.body);
            }
            this.el.show();
            setTimeout(function () {
                this.el.addClass('sui-transition');
            }.bind(this), 10);
            this.set('visible', true);
            return this;
        },
        /**
         * 隐藏该组件
         *
         * @method hide
         */
        hide: function () {
            if (this.isRender()) {
                this.el.removeClass('sui-transition');
                    setTimeout(function(){
                        this.el.hide();
                    }.bind(this),300);
                this.set('visible', false);
            }
            return this;
        },
        /**
         * 通过解析domEvents为dom元素绑定事件
         * @protected
         * @method _delegateEvents
         */
        _delegateEvents: function () {
            var events = this.get('events');
            for (var key in events) {
                var method = events[key];
                if (!$.isFunction(method))
                    method = this[events[key]];
                if (!method)
                    continue;

                var match = key.match(/^(\S+)\s*(.*)$/);
                var eventName = match[1], selector = match[2];

                method = this.proxy(method);
                eventName += '.delegateEvent' + this.name;
                if (selector === '') {
                    this.el.on(eventName, method);
                } else {
                    this.el.on(eventName, selector, method);
                }
            }
            return this;
        },
        proxy: function (method) {
            if (typeof method === 'string') {
                return $.proxy(this[method], this);
            } else {
                return $.proxy(method, this);
            }
        },

        /**
         * 销毁该组件
         * @method destroy
         */
        destroy: function () {

            this.trigger = null;
            if (this.el) {
                this.el.undelegate().remove();
            }
            // 是自动生成的container
            if (this._autoContainer) {
                this.get('container').remove();
            }
            this.el = this.container = null;
            this.off();
        }
    });

    return Widget;
});



/**
 * @module position
 */
define('position',['require','./declare','./attribute','jquery','./simple'],function (require) {

    var declare = require('./declare'),
        Attribute = require('./attribute'),
        $ = require('jquery'),
        S = require('./simple');

    /**
     * @class Simple.Position
     * @extends Simple.Attribute
     */
    return declare('Position', Attribute, {

        /**
         * 设置target的x方向的偏移量
         * @property {Int} offsetX
         * @default 0
         */
        offsetX: 0,
        /**
         * 设置target的y方向的偏移量
         * @property {Int} offsetY
         * @default 0
         */
        offsetY: 0,

        position: 'lt lb',
        /**
         * 定位的目标元素
         * @property {DOM | jQuery | Selector} target
         * @default null
         */
        target: null,
        /**
         * 定位的目标元素的参照元素
         * @property {DOM | jQuery | Selector} reference
         * @default document.body
         */
        reference: document.body,


        init: function () {

            this.on('attrchange', this.setPosition);
        },

        _getReferencePosition: function () {

            var reference = this.get('reference')[0],
                target = this.get('target')[0],
                referenceInfo = S.getOuterDimensions(reference),
                offset;

            if (reference.offsetParent === target.offsetParent) {
                referenceInfo.left = reference.offsetLeft;
                referenceInfo.top = reference.offsetTop;
            } else {
                offset = $(reference).offset();
                referenceInfo.left = offset.left;
                referenceInfo.top = offset.top;
            }
            return referenceInfo;
        },

        _getTargetPosition: function () {
            return S.getOuterDimensions(this.get('target')[0]);
        },

        _getterReference: function (reference) {
            return $(reference);
        },

        _getterTarget: function (target) {
            return $(target);
        },
        /**
         * 定位的方法
         * @method setPosition
         */
        setPosition: function (config) {

            config = config || {};

            var position = config.position || this.get('position'),
                offsetX = config.offsetX || this.get('offsetX'),
                offsetY = config.offsetY || this.get('offsetY'),
                referNodeOffset = this._getReferencePosition(),
                nodeSize = this._getTargetPosition(),
                nodeWidth = nodeSize.width,
                nodeHeight = nodeSize.height,
                referNodeWidth = referNodeOffset.width,
                referNodeHeight = referNodeOffset.height;

            if (typeof position === 'string') {
                switch (position) {
                    case 'cc cc':
                        l = referNodeOffset.left + (referNodeWidth - nodeWidth) / 2;
                        t = referNodeOffset.top + (referNodeHeight - nodeHeight) / 2;
                        break;
                    case 'lt lb':
                        l = referNodeOffset.left;
                        t = referNodeOffset.top + referNodeHeight;
                        break;
                    case 'lb lt':
                        l = referNodeOffset.left;
                        t = referNodeOffset.top - nodeHeight;
                        break;
                    case 'rt rb':
                        l = referNodeWidth + referNodeOffset.left - nodeWidth;
                        t = referNodeHeight + referNodeOffset.top;
                        break;
                    case 'rb rt':
                        l = referNodeWidth + referNodeOffset.left - nodeWidth;
                        t = referNodeOffset.top - nodeHeight
                        break;
                    case 'lt rt':
                        l = referNodeWidth + referNodeOffset.left;
                        t = referNodeOffset.top;
                        break;
                    case 'lc lc':
                        l = referNodeOffset.left;
                        t = referNodeOffset.top + (referNodeHeight - nodeHeight) / 2;
                        break;
                    case 'lt lt':
                        l = referNodeOffset.left;
                        t = referNodeOffset.top;
                        break;
                }
            }

            l += offsetX;
            t += offsetY;

            this.get('target').css({
                left: l,
                top: t
            });

            return this;
        }
    });
});
define('auto-complete',['require','jquery','./declare','./widget','./position'],function (require) {

    var $ = require('jquery'), AutoComplete, //存储远程获取的数据
        declare = require('./declare'),
        Widget = require('./widget'),
        Position = require('./position'),
        STATE_HOVER_CLASS = 'sui-state-hover',
        STATE_SELECTED_CLASS = 'sui-state-selected',
        S = Simple;

    /**
     * 自动完成组件，自动完成组件继承与widget，拥有和widget一样的生命周期。
     * 同样，AutoComplete被设计为可扩展的，很方面可以基于此定制特定的自动完成组件
     *
     *        new AutoComplete({
     *			node:'#test',
     *			source:['java','javascript']
     *		});
     *
     *    });
     *
     * @module auto-complete
     * @extends Simple.Widget
     * @class Simple.AutoComplete
     */
    AutoComplete = declare('AutoComplete', Widget, {

        name:'AutoComplete',
        /**
         * 需要提供自动完成功能的dom元素
         * @property node
         * @type String | HTMLElement
         * @default ""
         */
        node: '',
        /**
         * 生成自动完成功能提供模版
         * @property template
         * @type String
         * @readOnly
         * @default "<div class="sui-autocomplete"><div widgetpoint="autoCompleteList"></div></div>"
         */
        template: '<div class="sui-autocomplete sui-popup"><div data-role="autoCompleteList"></div></div>',

        /**
         * 自动完成功能的数据源，可以为本地数据，也可以为远程数据，甚至可以自定义一个函数来提供需要的数据
         * @property source
         * @type String | Function | Array | Store
         * @default ""
         */
        source: '',
        /**
         * 在获取远程数据时为了避免输入过快造成请求过多而设置的延时
         * @property delay
         * @type int
         * @default "0"
         */
        delay: 200,
        /**
         * 在获取远程数据时为node设置的请求状态
         * @property loadingClass
         * @readOnly
         * @type String
         * @default "sui-autocomplete-loading"
         */
        loadingClass: 'sui-autocomplete-loading',


        events: {
            'mouseover [rel=autocompleteItem]': '_onItemMouseOver',
            'mouseout [rel=autocompleteItem]': '_onItemMouseOut',
            'click [rel=autocompleteItem]': '_onItemClick'
        },
        /**
         * 初始化自动完成组件需要的一些属性
         * @method initAttrs
         * @protected
         */
        initAttrs: function () {
            if (this.get('source') instanceof Array) {
                this._localSource = true;
            }
            /**
             * 在请求远程数据时将数据缓存下来，大幅提升性能
             * @readOnly
             * @type Object
             * @default "{}"
             */
            this._cacheData = {};
        },
        /**
         * 初始化自动完成组件需要的事件
         * @method initBaseEvents
         * @protected
         */
        initBaseEvents: function () {

            if (this.node.is('input')) {

                this.node.on('keyup.autocomplete', this._onNodeKeyDown.bind(this))
                    .on('click', function (e) {
                        return false;
                    })
                    .attr('autocomplete', 'off');
            }

            $(document).on('click', this.hide.bind(this));
        },

        _renderUI: function () {
            this._position = new Position({
                target: this.el,
                reference: this.node
            });
        },

        /**
         * 数据项悬浮事件的操作
         * @method _onItemMouseOver
         * @param e {Event} jQuery事件传入包装的event
         * @private
         */
        _onItemMouseOver: function (e) {
            var target = $(e.currentTarget);

            target.addClass(STATE_HOVER_CLASS)
                .siblings()
                .removeClass(STATE_HOVER_CLASS);
        },
        /**
         * 数据项鼠标移出事件的操作
         * @method _onItemMouseOut
         * @param e {Event} jQuery事件传入包装的event
         * @private
         */
        _onItemMouseOut: function (e) {
            var target = $(e.currentTarget);
            target.removeClass(STATE_HOVER_CLASS);
        },
        /**
         * 数据项点击事件的操作
         * @method _onItemClick
         * @param e {Event} jQuery事件传入包装的event
         * @private
         */
        _onItemClick: function (e) {
            var target = $(e.currentTarget);
            this.selectItem(target);
            this.trigger('select', this.lastSelectedItem);
            this.finish();
            return false;
        },
        /**
         * node点击事件的操作
         * @method _onNodeKeyDown
         * @param e {Event} jQuery事件传入包装的event
         * @private
         */
        _onNodeKeyDown: function (e) {
            this._lastKeyDown = e.keyCode;
            switch (this._lastKeyDown) {
                //pageup
                case 38:
                    if (this.active) {
                        this._prev();
                    }
                    break;
                //pagedown
                case 40:
                    if (this.active) {
                        this._next();
                    } else {
                        this.activeAutoComplete();
                    }
                    break;
                //enter
                case 9:
                case 13:
                    if (this.active) {
                        this.selectCurrent();
                    }
                    break;
                //esc
                case 27:
                    if (this.active) {
                        this.finish();
                    }
                    break;
                default:
                    this.activeAutoComplete();
            }
        },
        /**
         * 激活自动提示,在这个方法里判断是否需要延时操作
         * @method activeAutoComplete
         * @protected
         */
        activeAutoComplete: function () {

            var self = this;

            if (this._activeTimeout) {
                clearTimeout(this._activeTimeout);
            }
            //如果是本地数据源
            if (this.delay && !this._localSource) {

                this._activeTimeout = setTimeout(function () {
                    self._activeNow();
                }, this.delay);

            } else {

                this._activeNow();
            }

        },
        /**
         * 判断输入的值是否符合激动自动提示的条件
         * @method _activeNow
         * @private
         */
        _activeNow: function () {

            var value = $.trim(this.node.val());
            //为空值
            if (!value.length) {
                this.finish();
                //最后一次访问的值
                this._lastProcessVal = null;
                return;
            }
            if (value) {
                this._lastProcessVal = value;
                this._fetch(value);
            }

        },
        /**
         * 根据输入的文字获取自动提示的数据
         * @method _fetch
         * @param value {String} 输入的input的值
         * @private
         */
        _fetch: function (value) {
            var currentData,
                source = this.get('source');

            //尝试读取缓存数据
            if (this._cacheData[value]) {
                this.set('currentData', this._cacheData[value]);
                this.active = true;
                return;
            }
            if (this._localSource) {
                if (source.length) {
                    currentData = this._filter(source, value);
                    this.parse(currentData);
                }
            } else {
                //发送请求,改变input状态
                this.node.addClass(this.get('loadingClass'));
                var postData = {}, name = this.node.attr('name');
                postData[name] = value;
                if (source.name && source.name.indexOf('Store') > -1) {
                    source.find(postData, {
                        strict: false
                    }).then(function (result) {
                            this.parse(result);
                        }.bind(this));
                }
                //尝试远程获取数据
                else if (typeof source === 'string') {
                    $.get(source, postData).then(function (result) {
                        this.parse(result);
                    }.bind(this));

                } else if (typeof source === 'function') {
                    source(value, function (result) {
                        this.parse(result);
                    }.bind(this));
                }
            }
        },
        /**
         * 解析获取自动提示的数据
         * @method parse
         * @param result {Array} 获取的数据
         * @protected
         */
        parse: function (result) {
            var currentData = this.getData(result),
                hasResult = this.getDataLength(currentData);

            if (hasResult) {
                this.active = true;
                this.set('currentData', currentData);
                this._setCacheData(this._lastProcessVal, currentData);
            } else {
                this.finish();
            }
            this.node.removeClass(this.get('loadingClass'));
        },
        /**
         * 通过复写此函数得到需要的真实的数据
         * @method getData
         * @param result {Array} 获取的数据
         * @return result
         */
        getData: function (result) {
            return result;
        },
        /**
         * 通过复写此函数得到数据的真实长度以便决定是否启用自动完成
         * @method getDataLength
         * @param result {Array} 获取的数据
         * @return result.length
         */
        getDataLength: function (result) {
            return result.length;
        },
        /**
         * 根据关键字与值过滤最后需要的数据
         * @method _filter
         * @param data {Array} 获取的数据
         * @param value {String} 输入的数据
         * @private
         * @return result
         */
        _filter: function (data, value) {

            var newArr = [];
            $.each(data, function (i, n) {
                var reg = new RegExp(value, "gi");
                if (n.label) {
                    if (reg.test(n.label) || reg.test(n.value)) {
                        newArr.push(n);
                    }
                } else {
                    if (reg.test(n)) {
                        newArr.push(n);
                    }
                }
            });
            return newArr;
        },
        /**
         * 使用此方法结束本次自动提示
         * @method finish
         */
        finish: function () {
            this.active = false;
            this.currentIndex = null;
            this.hide();
        },

        formatGroup: function (lastProcessValue, data) {
            if (data.forEach) {
                data.forEach(function (item, index) {
                    this.autoCompleteList.append(this.formatItem(lastProcessValue, item, index));
                }.bind(this));
            }
        },

        formatItem: function (lastProcessValue, item, index) {
            var label;
            if ($.isPlainObject(item)) {
                if (item.label) {
                    label = item.label.replace(new RegExp(this._lastProcessVal, 'g'), "<b class='sui-autocomplete-item-hl'>" + this._lastProcessVal + "</b>");
                } else {
                    label = '';
                }
            } else {
                label = item.replace(new RegExp(this._lastProcessVal, 'g'), "<b class='sui-autocomplete-item-hl'>" + this._lastProcessVal + "</b>");
            }
            return $('<div class="sui-autocomplete-item" rel="autocompleteItem">' + label + '</div>').data('item', item);
        },

        /**
         * 此方法用来渲染当前的自动完成的数据
         * @method _setterCurrentData
         * @param currentData {Array} 获取的最后的数据
         * @return currentData
         * @private
         */
        _setterCurrentData: function (currentData) {

            this.show();
            this.autoCompleteList.empty();

            var result = this.formatGroup(this._lastProcessVal, currentData);
            if (result) {
                this.autoCompleteList.append(result);
            }
            this._position.setPosition();
            this.currentData = currentData;
        },
        /**
         * 此方法用来缓存远程获取的数据
         * @method _setCacheData
         * @param value {String} 自动提示的键值
         * @param data {Array} 远程获取的数据
         * @private
         */
        _setCacheData: function (value, data) {
            if (this._cacheData.length && this._cacheData.length > 10) {
                this._cacheData = {};
                this._cacheData.length = 0;
            }
            this._cacheData[value] = data;
            this._cacheData.length++;
        },

        _next: function () {

            this.focus(1);
        },
        _prev: function () {

            this.focus(-1);
        },
        /**
         * 此方法用来聚焦选中的数据项
         * @method focus
         * @param index {Int} 索引值
         */
        focus: function (index) {

            if (this.currentIndex == null || typeof this.currentIndex == 'undefined') {
                index = this.currentIndex = 0;

            } else {

                index = this.currentIndex + index;
            }
            this.selectItem(index);

        },
        /**
         * 此方法用来选中的数据项,在这个过程中将会触发onSelect函数与onChange函数
         * @method focus
         * @param index {Int} 索引值
         * @protected
         */
        selectItem: function (index) {
            var autoCompleteItem, val, item;
            if (index instanceof $) {
                autoCompleteItem = index;
            } else {
                var items = this.el.find('[rel="autocompleteItem"]');
                index = index < 0 ? items.length - 1 : index;
                index = index == items.length ? 0 : index;
                this.currentIndex = index;
                items.removeClass(STATE_SELECTED_CLASS);
                autoCompleteItem = items.eq(index);
                autoCompleteItem.addClass(STATE_SELECTED_CLASS);
            }
            item = this.currentData[index] || autoCompleteItem.data('item');
            val = this.getValue(item, autoCompleteItem);
            this.node.val(val);
            this.lastSelectedItem = item;
            if (this.lastSelectedValue != val) {
                this.trigger('change', this.lastSelectedItem);
                this.lastSelectedValue = val;
            }
        },
        /**
         * 获取每个数据项的值，复写此方法可以定制相关的自动完成功能
         * @method getValue
         * @param item {Item} 每条数据项
         * @return value
         */
        getValue: function (item) {
            return item.value || item.label || item[this.node.attr('name')] || item;
        },
        /**
         * 选中当前数据项
         * @method selectCurrent
         */
        selectCurrent: function () {
            this.selectItem(this.currentIndex);
            this.trigger('select', this.lastSelectedItem);
            this.finish();
        },
        /**
         * 销毁自动完成组件
         * @method destroy
         */
        destroy: function () {
            this.currentIndex = null;
            this._cacheData = null;
            this.inherit(arguments);
        }
    });

    S.bridgeTojQuery('autocomplete', AutoComplete);

    return AutoComplete;
})
;

define('button',['require','jquery','./declare','./widget'],function (require) {

    var $ = require('jquery'), declare = require('./declare'), Widget = require('./widget');

    /**
     * Button按钮组件，提供可定制的按钮
     *		new Button({
     *			label:'button',
     *			handle:function(){
     *               alert('click');
     *          }
     *		});
     * @module button
     * @extends Simple.Widget
     * @class Simple.Button
     */
    var Button = declare('Button', Widget, {

        className: 'sui-button-normal',

        name: 'Button',
        /**
         * 是否获取焦点
         * @property  focus
         * @type Boolean
         * @default false
         */
        focus: false,
        /**
         * 按钮中的文字
         * @property  label
         * @type String
         * @default 'sui button'
         */
        label: 'sui button',
        /**
         * 图标类
         * @property icon
         * @type String
         * @default ''
         */
        icon: false,
        /**
         * 按钮的监听事件
         * @property  handle
         * @type Function
         */
        handle: $.noop,
        /**
         * 按钮是否被禁用
         * @property  disabled
         * @type Boolean
         * @default false
         */
        disabled: false,
        /**
         * 放置按钮容器的地点的类
         * @property containerClass
         * @type String
         * @reayOnly
         * @default 'sui-button-group'
         */
        containerClass: 'sui-button-group',

        /**
         * 渲染按钮的模版
         * @property template
         * @type String
         * @reayOnly
         * @default '<div role="button" tabindex="0"><i data-role="iconElement"></i><span data-role="labelElement"></span></div>'
         */
        template: '<button class="sui-button"  tabindex="0"><i data-role="iconElement"></i><span data-role="labelElement"></span></button>',

        /**
         * 为生成的按钮绑定事件
         * @method bindUI
         */
        bindUI: function () {
            this.el.on('click',this._onclick.bind(this));
        },
        /**
         * 按钮的点击事件操作
         * @method _onclick
         * @param e {Event} jQuery包装的Event
         * @protected
         */
        _onclick: function (e) {
            if (/disable/.test(e.currentTarget.className)) {
                return false;
            }
            this.handle.call(this, e);
        },
        /**
         * 渲染按钮的文字
         * @method _setterFocus
         * @param label {String} 按钮的文字
         * @protected
         */
        _uiSetLabel: function (label) {
            if (label) {
                this.labelElement.text(label).show();
            } else {
                this.labelElement.hide();
            }

        },
        /**
         * 渲染按钮的图标
         * @method _setterIcon
         * @param icon {String} 按钮的图标类
         * @protected
         */
        _uiSetIcon: function (icon) {

            if (this.iconElement && icon) {
                this.iconElement.removeClass().addClass('sui-icon ' + icon);
            }

        },
        /**
         * 销毁该按钮
         * @method destroy
         */
        destroy: function () {
            this.el.off();
            this.inherit(arguments);
        }
    });

    return Button;

});
/*This is beta version*/
define('button-group',['require','jquery','./declare','./widget'],function(require) {

    var $ = require('jquery'),
        declare = require('./declare'),
        Widget = require('./widget');
    /**
     * Button组按钮组件，提供一系列可定制的按钮
     *
     *		new ButtonGroup({
     *			childs:[]
     *		});
     * @module ui.button-group
     * @extends Widget
     * @class Simple.ButtonGroup
     */
    var ButtonGroup = declare('ButtonGroup', Widget, {

        name: 'ButtonGroup',

        /**
         * 设置提供按钮的数据
         * @property items
         * @type Array
         * @default []
         */
        childs: [],

        /**
         * 渲染按钮的模版
         * @property template
         * @type String
         * @reayOnly
         */
        template: '<div class="sui-button-group"></div>',

        renderUI: function() {

            this.renderChilds();

            var children = this.getChildren();
            if (children.length < 2) {
                return false;
            }
            children.forEach(function(child,index){
                if (index === 0) {
                    child.el.addClass('sui-button-first');
                }
                if (index === children.length - 1) {
                    child.el.addClass('sui-button-last');
                }
            });
        },
        /**
         * 启用某个按钮
         * @method enable
         * @param {Int} index 按钮在数据里的索引
         */
        enable: function(index) {
            var button = this.getChildren()[index];
            button.enable();
        },
        /**
         * 禁用某个按钮
         * @method disable
         * @param {Int} index 按钮在数据里的索引
         */
        disable: function(index) {
            var button = this.getChildren()[index];
            button.disable();
        },
        /**
         * 聚焦到某个按钮
         * @method setFocus
         * @param {Int} index 按钮在数据里的索引
         */
        focus: function(index) {
            var button = this.getChildren()[index];
            button.focus();
            this._currentFocus = focus;
        },
        /**
         * 获取聚焦的按钮
         * @method getFocus
         * @return {HTMLElement} button
         */
        getFocus: function() {
            return this._currentFocus;
        }
    });
    return ButtonGroup;
});
define('combo-button',['require','jquery','./declare','./button'],function (require) {

    var $ = require('jquery'), declare = require('./declare'), Button = require('./button');
    /**
     * 提供可分离的按钮组件
     * @extends Simple.Button
     * @class Simple.ComboButton
     */
    var ComboButton = declare('ComboButton', Button, {

        name: 'ComboButton',
        /**
         * 下拉菜单的实例
         * @property dropdown
         * @type Menu
         * @default null
         */
        dropdown: null,
        /**
         * 分离按钮的模板
         * @property template
         * @type String
         */
        template: '<button class="sui-combo-button"  tabindex="0">\
            <i data-role="iconElement"></i>\
            <span data-role="labelElement" class="sui-button-content"></span>\
            <span data-role="dropdownElement" class="sui-dropdown-arrow"><i class="sui-icon sui-icon-arrow-bottom"></i></span>\
        </button>',
        /**
         * 为生成的按钮绑定事件
         * @method bindUI
         */
        bindUI: function(){
            this.labelElement.on('click',this._onclick.bind(this));
            this.dropdownElement.on('click',this._dropdownClick.bind(this));
        },
        /**
         * 为按钮的下拉部分绑定操作
         * @method _dropdownClick
         * @param e {Event} jQuery包装的Event
         */
        _dropdownClick: function(e){
            e.stopPropagation();
            if (/disable/.test(e.currentTarget.className)) {
                return false;
            }
            if (this.dropdown) {
                this.dropdown._parent = this._parent;
                this.dropdown.showAt(this.el);
                this.trigger('dropdownshow');
            }
        },

        /**
         * 销毁该按钮
         * @method destroy
         */
        destroy: function(){
            this.labelElement.off();
            this.dropdownElement.off();
            this.inherit(arguments);
        }
    });

    return ComboButton;
});
define('modal',['require','jquery','./declare','./widget'],function(require){
    var $ = require('jquery'),
        declare = require('./declare'),
        Widget = require('./widget'),
        Modal;

    var getSize = function(el, isDoc) {
        el = $(el);
        if (el.is('body')) {
            if (isDoc) {
                return getDoc();
            } else {
                return getClient();
            }
        } else {
            return {
                h: el.outerHeight(),
                w: el.outerWidth()
            };
        }
    };

    var getDoc = function() {
        return {
            h: Math.max(document.documentElement.scrollHeight, document.documentElement.clientHeight),
            w: Math.max(document.documentElement.scrollWidth, document.documentElement.clientWidth)
        };
    };
    /**
     * 获取当前页面的可视宽高
     * @return {Object} Object.h 高度
     * @return {Object} Object.w 宽度
     */
    var getClient = function() {
        return {
            h: document.documentElement.clientHeight,
            w: document.documentElement.clientWidth
        };
    };
    /**
     * 渲染一个遮罩遮住某个dom元素
     * @class Simple.Modal
     * @module modal
     * @extends Simple.Widget
     */
    Modal = declare('Modal', Widget, {

        name: 'Modal',

        container: document.body,

        template: '<div class="sui-modal"></div>',

        node: null,

        renderUI: function() {
            if (this.container.css('position') === 'static') {
                this.container.css('position', 'relative');
            }
            this.setPosition();
        },
        bindUI: function() {
            $(window).bind('resize.modal', this.proxy('setPosition'));
        },
        setPosition: function() {
            var nodeOffset = this.node.offset(),
                containerOffset = this.container.offset(),
                nodeOuterSize = getSize(this.node, true);

            this.el.css({
                top: nodeOffset.top - containerOffset.top,
                left: nodeOffset.left - containerOffset.left,
                width: nodeOuterSize.w,
                height: nodeOuterSize.h
            });
        },
        show:function(){
            this.inherit(arguments);
            this.setPosition();
        },
        destroy: function() {
            this.inherit(arguments);
            $(window).unbind('resize.modal');
        }
    });
    return Modal;
});
define('drag',['require','jquery','./declare','./attribute'],function (require) {
    var $ = require('jquery'),
        declare = require('./declare'),
        Attribute = require('./attribute'),
        Drag;

    //拖动的时候不要选中元素
    $.fn.unselect = function (prevent) {
        prevent = (prevent == null) ? true : prevent;
        if (prevent) {
           return this.each(function(){
               $(this).attr('unselectable', 'on')
                   .css('user-select', 'none')
                   .on('selectstart', false);
           });
        } else {
            return this.each(function () {
                $(this).removeAttr('unselectable', 'on')
                    .css('user-select', 'inherit')
                    .off('selectstart');
            });
        }
    };

    //辅助获取正确的left，top值
    /**
     * 获取对象的绝对位置
     * @method getRealPos
     * @param {Object} element 需要获取位置的对象
     * @return {Object} 返回对象的top, left 值
     */
    var getRealPos = function (element) {
        var position = element.css("position"), top, left, parentOffset, offset = element.offset(), right, bottom;
        if (position == "static") {
            element.css("position", "relative");
            top = 0;
            left = 0;
        }
        else if (position == "absolute") {
            var el = element[0],
                offsetParent = el.offsetParent;
            parentOffset = $(offsetParent).offset();
            top = offset.top - parentOffset.top;
            left = offset.left - parentOffset.left;
        }
        else if (position == "fixed") {
            top = parseInt(element.css("top"), 10);
            left = parseInt(element.css("left"), 10);
            if (isNaN(top)) {
                top = offset.top - Math.max(document.documentElement.scrollTop, document.body.scrollTop);
            }
            if (isNaN(left)) {
                left = offset.left;
            }
        }
        else if (position == "relative") {
            top = parseFloat(element.css("top"));
            left = parseFloat(element.css("left"));
            right = parseFloat(element.css("right"));
            bottom = parseFloat(element.css("bottom"));
            if (isNaN(top)) {
                if (!isNaN(bottom)) {
                    top = -bottom;
                }
                else {
                    top = 0;
                }
            }
            if (isNaN(left)) {
                if (!isNaN(right)) {
                    left = -right;
                }
                else {
                    left = 0;
                }
            }
        }

        return {
            left: left,
            top: top
        };
    }, /**
     * 获取元素的 left top right bottom
     * @method getCoordinates
     * @param {Object} element 需要获取位置的对象
     * @return {Object} 返回对象的left top right bottom值
     */
        getCoordinates = function (element) {
        var coor;
        element = $(element);
        if (element.length < 1) {
            return;
        }
        var offset = element.offset(), right = element.outerWidth() + offset.left, bottom = element.outerHeight() + offset.top;

        coor = $.extend({
            right: right,
            bottom: bottom
        }, offset);

        return coor;
    }, getWinScroll = function () {
        return {
            x: Math.max(document.documentElement.scrollLeft, document.body.scrollLeft),
            y: Math.max(document.documentElement.scrollTop, document.body.scrollTop)
        };
    };
    /**
     * Drag模块为web应用增加类似桌面应用程序般的功能和易用性。Drag本身可以让一个Dom元素可移动，
     * 并且可以设置拖动手柄来启用拖动，也可以设置拖动的范围。Drag模块本身包括了一个放置模块，通过抛出的事件使得交互变得更加简单
     *
     *
     *         new Drag({
     *             node:'#drag-dom'
     *         });
     *
     *
     * @module drag
     * @class Simple.Drag
     * @extends Simple.Attribute
     */
    Drag = declare('Drag', Attribute, {

        /**
         * 设定需要被拖动的dom元素
         * @property node
         * @type String | HTMLElement
         * @default null
         */
        node: null,
        /**
         * 设定拖动该node时触发拖动的元素
         * @property handle
         * @type String
         * @default null
         */
        handle: null,
        /**
         * 限定拖动的范围
         * @property container
         * @type String | HTMLElement
         * @default document.body
         */
        container: document.body,
        /**
         * 拖动的时候的代理，如果为字符串则会复制原先的dom元素
         * @property proxy
         * @type String | Function
         * @default null
         */
        proxy: null,
        /**
         * 延迟多少像素触发拖动
         * @property delay
         * @type Int
         * @default 0
         */
        delay: 0,
        /**
         * 有拖动代理的情况下，该代理相对于鼠标的位置
         *
         *     atCursor:{
         *         top:-10,
         *         left:-10
         *     }
         *
         * @property atCursor
         * @type Object
         * @default null
         */
        atCursor: null,
        /**
         * 当拖动的页面存在有iframe的时候，是否修复从iframe拖动的时候出现闪烁的情况
         * @property iframeFix
         * @type Boolean
         * @default false
         */
        iframeFix: false,
        /**
         * 设定拖动的方向，可选值有both,x,y
         * @property direction
         * @type String
         * @default both
         */
        direction: 'both',
        /**
         * 设定拖动的步进
         *
         *     grid:[10,10]
         *
         * @property grid
         * @type Array
         * @default false
         */
        grid: false,
        /**
         * 设定拖动完毕后是否返回原先的位置
         * @property revert
         * @type Boolean
         * @default false
         */
        revert: false,
        /**
         * 设定拖动时候出发drop事件的元素
         * @property dropElements
         * @type String
         * @default false
         */
        dropElements: false,
        /**
         * 初始化拖动的事件
         * @method init
         * @protected
         */
        init: function () {
            if (!this.node) {
                return false;
            }
            this.node = $(this.node);
            this.currentPosition = this.node.css('position');
            var handle, self = this;
            this.dropElements = $(this.dropElements);
            handle = this.get('handle');
            handle.on('mousedown.drag', function (e) {
                if (e.target.tagName.toLowerCase() === 'input') {
                    return false;
                }
                self._movestart.apply(self, [e]);
                $(document.body).unselect(true);
            });
            //handle.trigger('mousedown.drag');
        },
        /**
         * 销毁拖动事件
         * @method destroy
         */
        destroy: function () {
            this.get('handle').off('mousedown.drag');
        },
        /**
         * 鼠标按下的时候的事件处理
         * @method _movestart
         * @param e {jQuery Event} jQuery包装后的event对象
         * @private
         */
        /**
         * 拖动开始的时候触发的事件，如果返回false，则阻止拖动
         * @event dragStart
         * @param {jQuery Event} event
         * @param {Object} context
         */
        _movestart: function (e) {
            e.stopPropagation();
            var node = this.node;
            this.lastX = e.pageX;
            this.lastY = e.pageY;
            this.lastNodeX = getRealPos(node).left;
            this.lastNodeY = getRealPos(node).top;
            this.offset = node.offset();
            this.nodeWidth = node.outerWidth();
            this.nodeHeight = node.outerHeight();
            if (this.trigger('dragStart', {
                event: e,
                context: this
            }) === false) {
                return false;
            }

            $(document).mousemove($.proxy(this._moving, this));
            $(document).mouseup($.proxy(this._movestop, this));
            this._setLimitRegion();
            //this._setIframeFix();
            if (!node.hasClass("draggable")) {
                node.addClass("draggable");
            }
            this.overed = null;
        },
        /**
         * 鼠标移动的时候的事件处理
         * @method _moving
         * @param e {jQuery Event} jQuery包装后的event对象
         * @private
         */
        /**
         * 拖动的时候触发的事件
         * @event drag
         * @param {jQuery Event} event
         * @param {Object} context 实例化后Drag的对象
         */
        _moving: function (e) {
            var node = this.node, updateEl;
            this.moveX = e.pageX;
            this.moveY = e.pageY;
            this.changeX = this.moveX - this.lastX;
            this.changeY = this.moveY - this.lastY;

            if (Math.abs(this.changeX) > this.delay && Math.abs(this.changeY) > this.delay) {
                this.draggable = true;
                $(document.body).css('cursor', 'move');
                if (this.grid) {
                    this.changeY = Math.round(this.changeY / this.grid[1]) * this.grid[1];
                    this.changeX = Math.round(this.changeX / this.grid[0]) * this.grid[0];
                }

                if (this.dragLimitRegion) {
                    if (this.offset.left + this.changeX < this.dragLimitRegion.left) {
                        this.changeX = this.dragLimitRegion.left - this.offset.left;
                    }
                    if (this.offset.left + this.changeX + this.nodeWidth > this.dragLimitRegion.right) {
                        this.changeX = this.dragLimitRegion.right - this.offset.left - this.nodeWidth;
                    }
                    if (this.offset.top + this.changeY < this.dragLimitRegion.top) {
                        this.changeY = this.dragLimitRegion.top - this.offset.top;
                    }
                    if (this.offset.top + this.changeY + this.nodeHeight > this.dragLimitRegion.bottom) {
                        this.changeY = this.dragLimitRegion.bottom - this.offset.top - this.nodeHeight;
                    }
                }

                this.left = this.lastNodeX + this.changeX;
                this.top = this.lastNodeY + this.changeY;

                if (this.proxy) {
                    this._setProxy();
                    updateEl = this.proxyEl;
                    this.updatePosition(updateEl, true);
                }
                else {
                    updateEl = node;
                    this.updatePosition(updateEl, false);
                }

                this.trigger('drag', {
                    event: e,
                    context: this
                });
                if (this.dropElements) {
                    this.checkDroppables();
                }
            }
        },
        /**
         * 鼠标弹起的时候的事件处理
         * @method _movestop
         * @param e {jQuery Event} jQuery包装后的event对象
         * @private
         */
        /**
         * 拖动停止的时候触发的事件
         * @event dragStop
         * @param {jQuery Event} event
         * @param {Object} context 实例化后Drag的对象
         */
        _movestop: function (e) {
            var updateEl;
            if (this.draggable) {
                if (this.dropElements) {
                    this.checkDroppables(true);
                }
            }
            if (this.proxy) {
                if (!this.revert) {
                    updateEl = this.node;
                    this.updatePosition(updateEl);
                }
                updateEl = this.proxyEl;
            }
            else {
                updateEl = this.node;
            }
            if (this.revert) {
                this.node.animate({
                    left: this.lastNodeX,
                    top: this.lastNodeY
                });
            }

            this.trigger('dragStop', {
                event: e,
                context: this
            });
            $(document).unbind('mousemove').unbind('mouseup');
            this.draggable = false;
            $(document.body).css({
                'cursor': 'default'
            }).unselect(false);
            if (this.proxyEl) {
                this.proxyEl.remove();
                this.proxyEl = null;
            }
        },
        /**
         * 设置拖动的范围
         * @method _setLimitRegion
         * @protected
         */
        _setLimitRegion: function () {
            var region = {};
            if (this.container) {
                if (this.container == document.body) {
                    var DOC = document.documentElement;
                    region.left = 0;
                    region.top = 0;
                    region.right = Math.max(DOC.clientWidth, DOC.scrollWidth);
                    region.bottom = Math.max(DOC.clientHeight, DOC.scrollHeight);
                }
                else {
                    var container = $(this.container);
                    region = getCoordinates(container);
                }
            }
            else {
                region = null;
            }
            this.dragLimitRegion = region;
        },
        /**
         * 设置拖动的代理
         * @method _setProxy
         * @protected
         */
        _setProxy: function () {
            if (this.proxyEl) {
                return;
            }
            var proxy = this.proxy;
            if (typeof proxy == "string") {
                this.proxyEl = this.node.clone().css({
                    "position": "absolute",
                    top: this.lastNodeY,
                    left: this.lastNodeX
                });
            }
            else if (typeof proxy == "function") {
                this.proxyEl = this.proxy.call(this.node);
                this.proxyEl.css("position", "absolute");
            }
            this.proxyEl.appendTo(document.body);
        },
        /**
         * 更新拖动的元素的位置
         * @method updatePosition
         * @param el {jQuery Object} 拖动的元素
         * @param proxy {Boolean} 是否有拖动代理
         * @protected
         */
        updatePosition: function (el, proxy) {
            var top = this.top, left = this.left;
            if (proxy) {
                top = this.offset.top + this.changeY;
                left = this.offset.left + this.changeX;
                if (this.atCursor) {
                    top = this.moveY + this.atCursor.top;
                    left = this.moveX + this.atCursor.left;
                }
            }
            if (this.direction == "both") {
                el.css({
                    top: top,
                    left: left
                });
            }
            else if (this.direction == "x") {
                el.css({
                    left: left
                });
            }
            else {
                el.css({
                    top: top
                });
            }
        },
        /**
         * 检测是否放置了元素
         * @method checkDroppables
         * @param isDrop {Boolean} 是否有放置
         * @protected
         */
        /**
         * 拖动离开放置元素时触发的事件
         * @event dragLeave
         * @param {jQuery Object} el 放置的元素
         * @param {Object} context 实例化后Drag的对象
         */
        /**
         * 拖动进入放置元素时触发的事件
         * @event dragEnter
         * @param {jQuery Object} el 放置的元素
         * @param {Object} context 实例化后Drag的对象
         */
        /**
         * 拖动放置元素时触发的事件
         * @event drop
         * @param {jQuery Object} el 放置的元素
         * @param {Object} context 实例化后Drag的对象
         */
        checkDroppables: function (isDrop) {
            var self = this;
            var overed = this.dropElements.filter(function (i, el) {
                el = $(el);
                if (self.proxy) {
                    return self.isInteract(el, self.proxyEl);
                }
                else {
                    return self.isInteract(el, self.node);
                }
            }).last();
            if (this.overed != overed[0]) {
                if (this.overed) {
                    // this.ondragleave.apply(this.node, [$(this.overed), this]);
                    this.trigger('dragLeave', this.overed);
                }
                if (overed[0]) {
                    this.trigger('dragEnter', overed);
                    // this.ondragenter.apply(this.node, [overed, this]);
                }
                this.overed = overed[0];
            }
            else {
                if (overed[0]) {
                    if (isDrop) {
                        // this.ondragdrop.apply(this.node, [overed, this]);
                        this.trigger('drop', overed);
                    }
                }
            }
        },
        getDroppableCoordinates: function (el) {
            if (el) {
                var position = getCoordinates(el);
                if (el.css("position") == "fixed") {
                    var scroll = getWinScroll();
                    position.top += scroll.y;
                    position.bottom += scroll.y;
                    position.left += scroll.x;
                    position.right += scroll.x;
                }
                return position;
            }
        },
        isInteract: function (nodeA, nodeB) {
            var a = this.getDroppableCoordinates(nodeA), b = this.getDroppableCoordinates(nodeB);
            //A top> B bottom
            //A bottom < B top
            //A right < B left
            //A left >B right
            if (a.top > b.bottom || a.bottom < b.top || a.right < b.left || a.left > b.right) {
                return false;
            }
            else {
                return true;
            }
        },
        _getterHandle: function (handle) {
            if (handle) {
                return this.node.find(handle);
            }
            else {
                return this.node;
            }
        }
    });

    return Drag;
});

define('dialog',['require','jquery','./declare','./widget','./modal','./drag','./position','./button'],function(require) {
    var $ = require('jquery'),
        declare = require('./declare'),
        Widget = require('./widget'),
        Modal = require('./modal'),
        Drag = require('./drag'),
        Position = require('./position'),
        Button = require('./button');

    var Dialog, _maxIndex = 1000,
        hasModal = false,
        _modalInc;
    /**
     * 对话框组件，提供可定制的遮罩对话框，支持多窗口,拖动等特性
     * @module dialog
     * @extends Simple.Widget
     * @class Simple.Dialog
     */
    Dialog = declare('Dialog',Widget, {
        /**
         * dialog 渲染的位置
         * @property container
         * @type String | HTMLElement
         * @default document.body
         */
        container: document.body,
        /**
         * 从dom中加载已有的元素到对话框中
         * @property node
         * @type String | HTMLElement
         * @default null
         */
        node: null,

        content:'',
        /**
         * dialog的标题,为false则不渲染标题
         *
         *     new Simple.Dialog({
         *         title:false,
         *         node:'#test'
         *     });
         * @property title
         * @type String
         * @default simple-dialog
         */
        title: 'simple-dialog',
        /**
         * dialog的附加类
         * @property className
         * @type String
         * @default 'simple-dialog'
         */
        className: 'sui-dialog',
        /**
         * 是否显示遮罩
         * @property modal
         * @type Boolean
         * @default true
         */
        modal: true,
        /**
         * 渲染显示的buttons,为false不渲染该按钮
         * @property buttons
         * @type Array | Object
         * @default false
         */
        buttons: false,
        /**
         * 渲染工具栏上面的按钮,为false则不渲染该按钮
         * @property handleTool
         * @type Array | Boolean
         * @default ['close']
         */
        handleTool: ['close'],
        /**
         * 最大化时指定的容器包裹
         * @property maxContainer
         * @type String | HTMLElement
         * @default body
         */
        maxContainer: 'body',
        /**
         * dialog的宽度
         * @property width
         * @type Int
         * @default ''
         */
        width: '',
        /**
         * dialog的高度
         * @property height
         * @type Int
         * @default ''
         */
        height: '',
        /**
         * 设置dialog初始出现的位置
         * @property position
         * @type Object
         * @see Position
         * @default
         */
        position: {
            position:'cc cc',
            reference:document.body
        },
        /**
         * 设置dialog是否可以拖动
         * @property draggable
         * @type Boolean
         * @default true
         */
        draggable: true,

        /**
         * 生成dialog的模版
         * @property template
         * @type String
         * @default template
         */
        template: '<div class="sui-dialog sui-dialog-normal">\
            <div class="sui-dialog-hd" data-role="dialogHead"> \
                <div class="sui-dialog-handle" data-role="dialogHandle"></div> \
                <h2 class="sui-dialog-title" data-role="dialogTitle"></h2>\
            </div>\
            <div class="sui-dialog-bd">\
                <div class="sui-dialog-content" data-role="dialogContent"></div>\
                <div data-role="dialogFoot"></div>\
            </div>  \
        </div>'
        ,
        /**
         * 是否启用堆栈对话框
         * @property stack
         * @type Boolean
         * @default true
         */
        stack: false,
        /**
         * 渲染dialog生成
         * @method renderUI
         */
        _renderUI: function() {

            var dialogContent;

            if (this.get('modal') || (!this.get('modal') && hasModal)) {

                if (!_modalInc) {
                    _modalInc = new Modal({
                        node: document.body
                    });
                }
                this._modalInc = _modalInc;
                this._modalInc.show();
                hasModal = true;
            }
            if (this.node.length) {
                dialogContent = this.node.clone(true);
                this.set('content',dialogContent);
            }
            //this.setFocus();
        },

        renderUI: function() {

            this.dialogContent.width(this.width).height(this.height);

            this._position = new Position($.extend({
                target: this.el
            },this.get('position')));

            this._position.setPosition();



            if (this.draggable) {
                new Drag({
                    node: this.el,
                    handle: '[data-role="dialogHead"]'
                });
            }
            if (this.stack) {
                this.el.css('z-index', _maxIndex++);
                this.constructor._stackDialog.length = this.constructor._stackDialog.dialog.push(this.el);
            }else{
                this.el.css('z-index', _maxIndex);
            }

            this.el.addClass('sui-transition');
        },
        /**
         * 渲染对话框的内容
         * @method _uiSetContent
         * @param content {String} 对话框的内容
         * @private
         */
        _uiSetContent: function(content) {

            if (this.dialogContent) {
                this.dialogContent.html(content);
            }

        },
        /**
         * 渲染对话框的标题
         * @method _uiSetTitle
         * @param title {String} 对话框的标题
         * @private
         */
        _uiSetTitle: function(title) {
            if (this.dialogTitle) {
                if (title) {
                    this.dialogTitle.html(title);
                } else {
                    this.dialogTitle.remove();
                }
            }
        },
        /**
         * 渲染对话框的工具栏
         * @method _uiSetHandleTool
         * @param tools {Array} 对话框的工具栏
         * @private
         */
        _uiSetHandleTool: function(tools) {
            if (tools.length) {
                $.each(tools, $.proxy(function(i, n) {
                    var tool = $("<a/>").addClass("sui-icon-font sui-dialog-" + n).attr("rel", "dialog" + n);
                       if(n == 'close'){
                           tool.html('&#x3496;');
                       }else{
                           tool.html(n);
                       }
                        self = this;
                    tool.click(function() {
                        if (self.trigger(n) === false) {
                            return false;
                        }
                        if (n == 'close') {
                            self.destroy();
                        } else {
                            self[n + 'Dialog']();
                        }
                    });
                    this.dialogHandle.append(tool);
                }, this));
            }
        },
        /**
         * 渲染对话框的按钮
         * @method _uiSetButtons
         * @param buttons {Array | Object} 对话框的按钮
         * @private
         * @return buttons
         */
        _uiSetButtons: function(buttons) {
            if (buttons) {
                var buttonInc = [],
                    self = this;
                var btnContainer = $("<div>").addClass("sui-dialog-button-wrap");
                this.dialogFoot.empty().append(btnContainer);
                $.each(buttons, function(index, button) {
                    buttonInc.push(new Button($.extend(button, {
                        container: btnContainer,
                        _parent: self
                    })));
                });
                this.buttonInc = buttonInc;
            }
        },
        /**
         * 为对话框绑定事件
         * @method bindUI
         * @protected
         */
        bindUI: function() {
            if (this.stack) {
                this.dialogHead.on('mousedown', $.proxy(this.setFocus, this));
            }
            $(document).on('keyup.esc', $.proxy(this.destroy, this));

            this.on('show', this.proxy(function() {
                if ($.isFunction(this.onshow)) {
                    this.onshow.call(this, this.el);
                }
            }));
            this.on('hide', this.proxy(function() {
                if ($.isFunction(this.onhide)) {
                    this.onhide.call(this, this.el);
                }
            }));
        },

        minDialog: $.noop,
        maxDialog: $.noop,

        /**
         * 将对话框隐藏
         * @method hide
         */
        hide: function() {
            if (this.get('modal')) {
                this._modalInc.hide();
            }
            this.inherit(arguments);
            return this;
        },
        /**
         * 聚焦到该对话框，只在启用多窗口时有效
         * @method setFocus
         */
        setFocus: function() {
            if (this.stack) {
                var maxIndex = this._getMaxIndex();
                if (this.el.css('z-index') == maxIndex) {
                    return false;
                }
                this.el.css('z-index', maxIndex + 1);
                this.constructor._stackDialog.focus = this.el;
            }
        },
        /**
         * 获取当前聚焦的窗口，只在启用多窗口时有效
         * @method getFocus
         * @return jQuery Object
         */
        getFocus: function() {
            if (this.stack) {
                return this.constructor._stackDialog.focus;
            }
        },
        /**
         * 获取当前所有对话框最大的z-index值
         * @method _getMaxIndex
         * @private
         * @return z-index
         */
        _getMaxIndex: function() {
            var zIndexList = [],
                maxIndex;
            $.each(this.constructor._stackDialog.dialog, function(index, dialog) {
                zIndexList.push(dialog.css('z-index'));
            });
            maxIndex = Math.max.apply(this, zIndexList);
            return maxIndex;
        },
        /**
         * 销毁该对话框
         * @method destroy
         */
        destroy: function() {
            if (this.buttoInc && this.buttoInc.length) {
                $.each(this.buttonInc, function(i, buttonInc) {
                    buttonInc.destroy();
                });
            }
            if (this.stack) {
                this.constructor._stackDialog.length--;
                if (!this.constructor._stackDialog.length) {
                    if (this._modalInc) {
                        this._modalInc.hide();
                    }
                    this.constructor._stackDialog.dialog = [];
                    this.constructor._stackDialog.focus = null;
                }
            } else {
                if (this._modalInc) {
                    this._modalInc.hide();
                }
            }
            this.inherit(arguments);
        },
        setPosition: function(config){
            config = config || {};
            if(config instanceof Array){
                this.el.css({
                    width: config[0],
                    height: config[1]
                });
            }else if(this._position){
                this._position.setPosition(config);
            }
        }
    });

    Dialog._stackDialog = {
        length: 0,
        dialog: [],
        focus: null,
        modal: null
    };

    //S.bridgeTojQuery("dialog", Dialog);

    /**
     * 弹出一个远程获取数据的窗口
     * @param {Object} config
     * @see Simple.Dialog
     * @static
     * @return Simple.Dialog的实例
     */
    $.ajaxDialog = Dialog.Ajax =  function(config) {

        var _ajaxDialogCache = {}, dialog, options;

        config = $.extend({
            url: '',
            data: [],
            onload: $.noop,
            loadingMessage: 'loading...'
        }, config);

        options = $.extend(config, {
            node: '<div class="sui-dialog-load">' + config.loadingMessage + '</div>'
        });

        dialog = new Dialog(options);

        dialog.el.addClass('sui-dialog-ajax');

        getHtmlByAjax(config.url, config.data, function(html) {
            dialog.set('content', html);
            dialog.setPosition(config.position || {});
            config.onload.call(dialog);
        });

        function getHtmlByAjax(url, data, callback) {
            var html = _ajaxDialogCache[url];
            if (html) {
                callback(html);
            } else {
                $.ajax({
                    url: url,
                    dataType: "html",
                    // async:true,
                    data: data,
                    success: function(r) {
                        _ajaxDialogCache[url] = r;
                        callback(r);
                    },
                    error: function() {
                        throw new Error('不能找到对应的HTML!', url);
                    }
                });
            }
        }

        return dialog;
    };

    var uuid = 0;
    /**
     * 弹出一个嵌套iframe的窗口
     * @method Simple.iframeDialog
     * @param {Object} config
     * @see Simple.Dialog
     * @static
     * @return Simple.Dialog的实例
     */
    $.iframeDialog = Dialog.Iframe = function(config) {

        var options, dialog, id = (uuid++);

        config = $.extend({
            url: '',
            onload: $.noop,
            loadingMessage: 'loading...'
        }, config);

        //options = $.extend(config, {
        // node : '<div class="simple-dialog-load">' + config.loadingMessage + '</div>' + '<iframe  class="simple-content-iframe" src="' + config.url + '" frameBorder="0" id="SimpleDialogFrame' + id + '" name="SimpleDialogFrame' + id + '" style="display:none"></iframe>'
        // });
        options = $.extend(config, {
            node: '<iframe  class="sui-content-iframe" src="' + config.url + '" frameBorder="0" id="SimpleDialogFrame' + id + '" name="SimpleDialogFrame' + id + '"></iframe>'
        });

        dialog = new Dialog(options);
        window["SimpleDialogFrame" + id].onload = function() {
            dialog.dialogContent.find(".sui-dialog-load").remove();
            dialog.dialogContent.find("iframe").fadeIn();
            dialog.setPosition(config.position || {});
            config.onload.call(this);
        };

        // window["SimpleDialogFrame"] = null;
        return dialog;

    };
    /**
     * 弹出一个警告的窗口
     * @method Dialog.Alert
     * @param {Object} config
     * @see Simple.Dialog
     * @static
     * @return Simple.Dialog的实例
     */
    $.alertDialog = Dialog.Alert = function(config) {

        config = $.extend({}, config, {
            content: '<div class="sui-dialog-alert"><i class="sui-icon-alert sui-icon-font"></i>' + config.content + '</div>',
            buttons: [{
                    label: 'OK',
                    className: 'sui-button-primary',
                    handle: function() {
                        if ((config.onsure || $.noop).call(dialog) === false) {
                            return false;
                        }
                        dialog.destroy();
                    }
                }
            ],
            title: config.title || 'Alert'
        });
        var dialog = new Dialog(config);
        return dialog;

    };

    /**
     * 弹出一个确认的窗口
     * @method Simple.confirmDialog
     * @param {Object} config
     * @see Simple.Dialog
     * @static
     * @return Simple.Dialog的实例
     */
    $.confirmDialog = Dialog.Confirm = function(config) {

        config = $.extend({}, config, {
            content: '<div class="sui-dialog-confirm"><i class="sui-icon-confirm sui-icon-font"></i>' + config.content + '</div>',
            buttons: [{
                    label: 'OK',
                    className: 'sui-button-primary',
                    handle: function() {
                        if ((config.onsure || $.noop).call(dialog) === false) {
                            return false;
                        }
                        dialog.destroy();
                    }
                }, {
                    label: 'Cancel',
                    handle: function() {
                        if ((config.oncancel || $.noop).call(dialog) === false) {
                            return false;
                        }
                        dialog.destroy();
                    }
                }
            ],
            title: config.title || 'Confirm'
        });

        var dialog = new Dialog(config);
        return dialog;

    };

    return Dialog;
});
define('support',[],function() {

	return {
		// support transition
		transition: (function() {
			var transitionEnd = (function() {
				var el = document.createElement('div'),
					transEndEventNames = {
						'WebkitTransition': 'webkitTransitionEnd',
						'MozTransition': 'transitionend',
						'OTransition': 'oTransitionEnd otransitionend',
						'transition': 'transitionend'
					},
					transformNames = {
						'WebkitTransition': '-webkit-transform',
						'MozTransition': '-moz-transform',
						'OTransition': '-o-transform',
						'transition': 'transform'
					},name
				
				for (name in transEndEventNames) {
					if (el.style[name] !== undefined) {
						return {
							transform:transformNames[name],
							attr: name,
							eventType: transEndEventNames[name]
						}
					}
				}
				
				return false;
				
			}());
			
			return transitionEnd;
		})()
		
	};
});
define('popup',['require','jquery','./declare','./widget','./simple','./position','./support'],function (require) {
    var $ = require('jquery'),
        declare = require('./declare'),
        Widget = require('./widget'),
        S = require('./simple'),
        Position = require('./position'),
        support = require('./support');

    var isFitHorizontal = function (el, leftOffset) {
        var leftVal = parseInt(leftOffset, 10) || $(el).offset().left,
            scroll = S.getScroll(),
            scrollLeft = scroll.left,
            bodyWidth = S.getClient().width,
            elWidth = $(el).width();

        return (leftVal + elWidth <= bodyWidth + scrollLeft && leftVal - scrollLeft >= 0);
    };

    var isFitVertical = function (el, topOffset) {
        var topVal = parseInt(topOffset, 10) || $(el).offset().top,
            scroll = S.getScroll(),
            scrollTop = scroll.top,
            bodyHeight = S.getClient().height,
            elHeight = $(el).height();

        return (topVal + elHeight <= bodyHeight + scrollTop && topVal - scrollTop >= 0);
    };
    /**
     * 弹出层组件，提供定位功能
     * @extends Simple.Widget
     * @class Simple.Popup
     */
    var Popup = declare('Popup', Widget, {

        name: 'Popup',

        className: 'sui-popup',

        template: '<div><div data-role="contentElement"></div></div>',
        /**
         * 触发该操作的节点
         * @property node
         * @type String | jQuery
         * @default null
         */
        node: '',

        /**
         * 弹出层出现的内容
         * @property content
         * @default ''
         */
        content: '',
        /**
         * 触发的方式
         * @property triggerType
         * @default click
         */
        triggerType: 'click',


        position: 'lt lb',


        initBaseEvents: function () {
            this._bindNode();
        },


        _bindNode: function () {
            var alignNode = this.get('alignNode'),
                triggerType = this.get('triggerType');

            this.bindTrigger(this.node, alignNode, triggerType);
        },
        /**
         * 绑定触发的节点
         * @param trigger
         * @param alignNode
         * @param triggerType
         */
        bindTrigger: function (trigger, alignNode, triggerType) {

            if (triggerType) {
                if (!trigger.on) {
                    trigger = $(trigger);
                }

                var show = function (e) {
                    var currentTrigger = $(e.target), node;
                    this.currentTrigger = currentTrigger;
                    node = alignNode.length ? alignNode : this.currentTrigger;
                    this.showAt(node, e);
                    return false;
                }, hide = this.hide;

                switch (triggerType) {
                    case 'hover':
                        var showTimeout, hideTimeout;
                        trigger.on('mouseenter', function (e) {
                            showTimeout = setTimeout(show.bind(this, e), 200);
                        }.bind(this));
                        trigger.on('mouseleave', function (e) {
                            if (showTimeout) {
                                clearTimeout(showTimeout);
                            }
                            hideTimeout = setTimeout(hide.bind(this, e), 200);
                        }.bind(this));
                        break;
                    case 'focus':
                        trigger.focus(show.bind(this)).blur(hide.bind(this));
                        break;
                    default :
                        trigger.on(triggerType, show.bind(this));
                        break;
                }
            }
        },

        bindUI: function () {
            this.el.on('click', function (e) {
                e.stopPropagation();
                if (this._hideElement) {
                    this._hideElement();
                }
            }.bind(this));
            if (this.get('triggerType') == 'click') {
                $(document).on('click', this.hide.bind(this));
                $(window).on('resize', this.hide.bind(this));
            }
        },

        _uiSetContent: function (content) {
            if (this.contentElement) {
                this.contentElement.html(content);
            }
        },

        _getterContent: function (content) {
            if (typeof content === 'string') {
                return content;
            } else if (typeof content === 'function') {
                return content.call(this);
            } else {
                return content.html();
            }
            return content;
        },

        _getterAlignNode: function (alignNode) {
            return $(alignNode);
        },

        _renderUI: function () {
            this._position = new Position({
                target: this.el,
                reference: this.get('alignNode'),
                position: this.get('position'),
                offsetX: this.get('offsetX'),
                offsetY: this.get('offsetY')
            });
        },

        /**
         * 指定显示参考的节点
         * @param alignNode
         */
        showAt: function (alignNode) {

            if (this.get('visible')) {
                this.el.removeClass('sui-transition');
            }

            this.show();

            this._position.set('reference', alignNode);

            this.fixPosition();
        },
        /**
         * 修正弹出层的位置
         */
        fixPosition: function () {

            var position = this.get('position'),
                positionSplit;


            if (!isFitHorizontal(this.el)) {
                if (position.indexOf('l') >= 0) {
                    position = position.replace(/l/g, 'r');
                } else {
                    position = position.replace(/r/g, 'l');
                }
            }

            //如果垂直放不下
            if (!isFitVertical(this.el)) {
                positionSplit = position.split(' ');
                position = [positionSplit[1],positionSplit[0]].join(' ');
            }

            this._position.setPosition({
                position:position
            });
        },

        _setterPosition: function (position) {
            if (this._position) {
                this._position.set('position', position);
            }
        },

        _setterAlignNode: function (alignNode) {
            if (this._position) {
                this._position.set('reference', alignNode);
            }
        }
    });

    return Popup;
});

define('date-picker',['require','jquery','./declare','./popup'],function (require) {

    var $ = require('jquery'), declare = require('./declare');

    var Popup = require('./popup'), dateCache = {};

    /**
     * 日期选择基础类,提供最基本的日历渲染功能
     * @class Simple.DatePickerBase
     * @extends Simple.Widget
     * @module ui.date-picker
     */
    var DatePicker = declare('DatePicker', Popup, {

        /**
         * 为生成的el相对定位的节点
         * @property node
         * @type String
         * @default ''
         */
        node: null,

        selectDate: '',

        monthNames: ["January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"], // Names of months for drop-down and formatting
        monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], // For formatting
        dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], // For formatting
        dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], // For formatting
        dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], // Column headings for days starting at Sunday
        weekHeader: "Wk", // Column header for week of the
        /**
         * @property dateFormat
         * @type String
         * @default 'yyyy-mm-dd'
         *
         * ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
         * COOKIE: "D, dd M yy",
         * ISO_8601: "yy-mm-dd",
         * RFC_822: "D, d M y",
         * RFC_850: "DD, dd-M-y",
         * RFC_1036: "D, d M y",
         * RFC_1123: "D, d M yy",
         * RFC_2822: "D, d M yy",
         * RSS: "D, d M y", // RFC 822
         * TICKS: "!",
         * TIMESTAMP: "@",
         * W3C: "yy-mm-dd",
         */
        dateFormat: "yy/mm/dd", // See format options on parseDate

        events: {
            'click [data-role=prevYear]': '_onDateYearCtrlPrevClick',
            'click [data-role=nextYear]': '_onDateYearCtrlNextClick',
            'click [data-role=prevMonth]': '_onDateMonthCtrlPrevClick',
            'click [data-role=nextMonth]': '_onDateMonthCtrlNextClick',
            'click [data-role=dateItem]': '_onDateContentClick'
        },
        /**
         * 生成EL的模版
         * @property template
         * @type String
         * @default ''
         */
        template: '<div class="sui-date-picker">\
            <div class="sui-date-control">\
                <div class="sui-date-year">\
                    <a class="sui-date-action sui-icon-font" data-role="prevYear" href="javascript:;">&#xf01a8;</a>\
                    <span class="" data-role="dateYear"></span>\
                    <a class="sui-date-action sui-icon-font" data-role="nextYear" href="javascript:;">&#xf01a9;</a>\
                </div>\
                <span class="sui-date-month">\
                    <a class="sui-date-action sui-icon-font" data-role="prevMonth" href="javascript:;">&#xf01a8;</a>\
                    <span class="" data-role="dateMonth"></span>\
                    <a class="sui-date-action sui-icon-font" data-role="nextMonth" href="javascript:;">&#xf01a9;</a>\
                </span>\
            </div>\
            <ul class="sui-date-week" data-role="dateWeek"><li>日</li><li>一</li><li>二</li>\
            <li>三</li><li>四</li><li>五</li><li>六</li>\
            </ul>\
            <ul data-role="dateContent" class="sui-date-content"></ul>\
            </div>',

        init: function () {
            this.after('show', function () {
                this.set('selectDate', this.currentTrigger.val());
            });
        },

        _onDateYearCtrlPrevClick: function (e) {
            this.currentYear = this.currentYear - 1;
            this._setDatePickerContent(this.currentYear, this.currentMonth);
            return false;
        },
        _onDateYearCtrlNextClick: function (e) {
            this.currentYear = this.currentYear + 1;
            this._setDatePickerContent(this.currentYear, this.currentMonth);
            return false;
        },
        _onDateMonthCtrlPrevClick: function (e) {
            if (this.currentMonth - 1 < 1) {
                this.currentMonth = 12;
                this.currentYear = this.currentYear - 1;
            } else {
                this.currentMonth = this.currentMonth - 1;
            }
            this._setDatePickerContent(this.currentYear, this.currentMonth);
            return false;
        },
        _onDateMonthCtrlNextClick: function (e) {

            if (this.currentMonth + 1 > 12) {
                this.currentMonth = 1;
                this.currentYear = this.currentYear + 1;
            } else {
                this.currentMonth = this.currentMonth + 1;
            }
            this._setDatePickerContent(this.currentYear, this.currentMonth);
            return false;
        },
        /*获取一个月有多少天*/
        _getMonthTotalDay: function (year, month) {
            return new Date(new Date(year, month, 1) - 864000).getDate();
        },
        /*获取一个月第一天是星期几*/
        _getMonthFirstDay: function (year, month) {
            return new Date(year, month - 1, 1).getDay();
        },
        _uiSetDayNamesMin: function(dayNamesShort){
            var html='';
            dayNamesShort.forEach(function(dayName){
                html+='<li>'+dayName+'</li>';
            });
            this.dateWeek.html(html);

        },
        _uiSetSelectDate: function (selectDate) {

            var year, month, day, date;

            if (!selectDate) {
                selectDate = this.formatDate(new Date(), this.get('dateFormat'));
            }
            try{
                date = this.parseDate(selectDate, this.get('dateFormat'));
            }catch (e){
                date = new Date();
            }

            year = date.getFullYear();
            month = date.getMonth() + 1;
            day = date.getDate();

            this._setDatePickerContent(year, month, day);

        },
        _setDatePickerContent: function (year, month, day) {

            var year = parseInt(year, 10),
                month = parseInt(month, 10),
                day = parseInt(day, 10),

                totalDay = this._getMonthTotalDay(year, month),
                start = this._getMonthFirstDay(year, month),
                today = new Date().getDate(),
                currentMonth = new Date().getMonth() + 1,
                currentYear = new Date().getFullYear(),
                html = '',
                key = year + '_' + month,
                isToday,
                isSelectedDay;


            if (dateCache[key]) {
                html = dateCache[key];
            } else {

                for (var i = 0; i < totalDay + start; i++) {
                    if (i < start) {
                        html += '<li class="disabled"> &nbsp;</li>';
                    } else {
                        var date = (i - start + 1), cls = '';
                        isToday = (currentYear == year && currentMonth == month && date == today);
                        isSelectedDay = (date == day);
                        if (isToday) {
                            cls += 'class="current';
                        }
                        if (isSelectedDay) {
                            if (cls.length) {
                                cls += ' sui-date-picker-selected"';
                            } else {
                                cls += 'class="sui-date-picker-selected"';
                            }
                        } else if (isToday) {
                            cls += '"';
                        }
                        html += '<li ' + cls + ' data-role="dateItem">' + date + '</li>'
                    }
                }
                dateCache[key] = html;
            }
            this.dateContent.html(html);
            this.dateYear.html(year);
            this.dateMonth.html(month);
            this.currentYear = parseInt(year, 10);
            this.currentMonth = parseInt(month, 10);
        },

        _onDateContentClick: function (e) {
            var target = $(e.currentTarget);

            this.currentDay = parseInt(target.text(), 10);
            this.currentDate = this.formatDate(new Date(this.currentYear, this.currentMonth - 1, this.currentDay), this.get('dateFormat'));
            this.currentTrigger.val(this.currentDate);
            this.trigger('select', this.currentDate);
            this.hide();
        },
        //
        //@see https://github.com/jquery/jquery-ui/blob/master/ui/datepicker.js#L1101
        parseDate: function (value, format, settings) {

            value = (typeof value === "object" ? value.toString() : value + "");
            if (value === "") {
                return null;
            }

            var iFormat, dim, extra,
                iValue = 0,
                shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this.get('shortYearCutoff'),
                shortYearCutoff = (typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
                    new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)),
                dayNamesShort = (settings ? settings.dayNamesShort : null) || this.get('dayNamesShort'),
                dayNames = (settings ? settings.dayNames : null) || this.get('dayNames'),
                monthNamesShort = (settings ? settings.monthNamesShort : null) || this.get('monthNamesShort'),
                monthNames = (settings ? settings.monthNames : null) || this.get('monthNames'),
                year = -1,
                month = -1,
                day = -1,
                doy = -1,
                literal = false,
                date,
            // Check whether a format character is doubled
                lookAhead = function (match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
                    if (matches) {
                        iFormat++;
                    }
                    return matches;
                },
            // Extract a number from the string value
                getNumber = function (match) {
                    var isDoubled = lookAhead(match),
                        size = (match === "@" ? 14 : (match === "!" ? 20 :
                            (match === "y" && isDoubled ? 4 : (match === "o" ? 3 : 2)))),
                        digits = new RegExp("^\\d{1," + size + "}"),
                        num = value.substring(iValue).match(digits);
                    if (!num) {
                        throw "Missing number at position " + iValue;
                    }
                    iValue += num[0].length;
                    return parseInt(num[0], 10);
                },
            // Extract a name from the string value and convert to an index
                getName = function (match, shortNames, longNames) {
                    var index = -1,
                        names = $.map(lookAhead(match) ? longNames : shortNames,function (v, k) {
                            return [
                                [k, v]
                            ];
                        }).sort(function (a, b) {
                                return -(a[1].length - b[1].length);
                            });

                    $.each(names, function (i, pair) {
                        var name = pair[1];
                        if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
                            index = pair[0];
                            iValue += name.length;
                            return false;
                        }
                    });
                    if (index !== -1) {
                        return index + 1;
                    } else {
                        throw "Unknown name at position " + iValue;
                    }
                },
            // Confirm that a literal character matches the string value
                checkLiteral = function () {
                    if (value.charAt(iValue) !== format.charAt(iFormat)) {
                        throw "Unexpected literal at position " + iValue;
                    }
                    iValue++;
                };

            for (iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                        literal = false;
                    } else {
                        checkLiteral();
                    }
                } else {
                    switch (format.charAt(iFormat)) {
                        case "d":
                            day = getNumber("d");
                            break;
                        case "D":
                            getName("D", dayNamesShort, dayNames);
                            break;
                        case "o":
                            doy = getNumber("o");
                            break;
                        case "m":
                            month = getNumber("m");
                            break;
                        case "M":
                            month = getName("M", monthNamesShort, monthNames);
                            break;
                        case "y":
                            year = getNumber("y");
                            break;
                        case "@":
                            date = new Date(getNumber("@"));
                            year = date.getFullYear();
                            month = date.getMonth() + 1;
                            day = date.getDate();
                            break;
                        case "!":
                            date = new Date((getNumber("!") - this._ticksTo1970) / 10000);
                            year = date.getFullYear();
                            month = date.getMonth() + 1;
                            day = date.getDate();
                            break;
                        case "'":
                            if (lookAhead("'")) {
                                checkLiteral();
                            } else {
                                literal = true;
                            }
                            break;
                        default:
                            checkLiteral();
                    }
                }
            }

            if (iValue < value.length) {
                extra = value.substr(iValue);
                if (!/^\s+/.test(extra)) {
                    throw "Extra/unparsed characters found in date: " + extra;
                }
            }

            if (year === -1) {
                year = new Date().getFullYear();
            } else if (year < 100) {
                year += new Date().getFullYear() - new Date().getFullYear() % 100 +
                    (year <= shortYearCutoff ? 0 : -100);
            }

            if (doy > -1) {
                month = 1;
                day = doy;
                do {
                    dim = this._getMonthTotalDay(year, month);
                    if (day <= dim) {
                        break;
                    }
                    month++;
                    day -= dim;
                } while (true);
            }

            date = new Date(year, month - 1, day);
            if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
                throw "Invalid date";
            }
            return date;
        },
        /**
         * 格式化日期
         * @param date
         * @param format
         * @see https://github.com/jquery/jquery-ui/blob/master/ui/datepicker.js#L1309
         * @return {String} 格式化后的日期
         */
        formatDate: function (date, format, settings) {
            if (!date) {
                return "";
            }

            var iFormat,
                dayNamesShort = (settings ? settings.dayNamesShort : null) || this.get('dayNamesShort'),
                dayNames = (settings ? settings.dayNames : null) || this.get('dayNames'),
                monthNamesShort = (settings ? settings.monthNamesShort : null) || this.get('monthNamesShort'),
                monthNames = (settings ? settings.monthNames : null) || this.get('monthNames'),
            // Check whether a format character is doubled
                lookAhead = function (match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
                    if (matches) {
                        iFormat++;
                    }
                    return matches;
                },
            // Format a number, with leading zero if necessary
                formatNumber = function (match, value, len) {
                    var num = "" + value;
                    if (lookAhead(match)) {
                        while (num.length < len) {
                            num = "0" + num;
                        }
                    }
                    return num;
                },
            // Format a name, short or long as requested
                formatName = function (match, value, shortNames, longNames) {
                    return (lookAhead(match) ? longNames[value] : shortNames[value]);
                },
                output = "",
                literal = false;

            if (date) {
                for (iFormat = 0; iFormat < format.length; iFormat++) {
                    if (literal) {
                        if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                            literal = false;
                        } else {
                            output += format.charAt(iFormat);
                        }
                    } else {
                        switch (format.charAt(iFormat)) {
                            case "d":
                                output += formatNumber("d", date.getDate(), 2);
                                break;
                            case "D":
                                output += formatName("D", date.getDay(), dayNamesShort, dayNames);
                                break;
                            case "o":
                                output += formatNumber("o",
                                    Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
                                break;
                            case "m":
                                output += formatNumber("m", date.getMonth() + 1, 2);
                                break;
                            case "M":
                                output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
                                break;
                            case "y":
                                output += (lookAhead("y") ? date.getFullYear() :
                                    (date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
                                break;
                            case "@":
                                output += date.getTime();
                                break;
                            case "!":
                                output += date.getTime() * 10000 + this._ticksTo1970;
                                break;
                            case "'":
                                if (lookAhead("'")) {
                                    output += "'";
                                } else {
                                    literal = true;
                                }
                                break;
                            default:
                                output += format.charAt(iFormat);
                        }
                    }
                }
            }
            return output;
        }
    });

    return DatePicker;
});

define('dropdown-button',['require','jquery','./declare','./button'],function (require) {

    var $ = require('jquery'), declare = require('./declare'), Button = require('./button');
    /**
     * 提供可分离的按钮组件
     * @extends Simple.Button
     * @class Simple.DropDownButton
     */
    var DropDownButton = declare('DropDownButton', Button, {

        name: 'DropDownButton',

        hasDropDownIcon: true,
        /**
         * 下拉菜单的实例
         * @property dropdown
         * @type Menu
         * @default null
         */
        dropdown: null,
        /**
         * 下拉按钮的模板
         * @property template
         * @type String
         */
        template: '<button class="sui-button sui-dropdown-button"  tabindex="0">\
                         <i data-role="iconElement"></i>\
                         <span data-role="labelElement"></span>\
                        <i data-role="dropdownElement" class="sui-arrow-bottom-bg" tabindex="0"></i>\
                    </button>',

        renderUI: function(){
            this.inherit(arguments);
            this.el.attr('aria-haspopup',true);
        },

        _onclick: function (e) {
            e.stopPropagation();
            if (/disable/.test(e.currentTarget.className)) {
                return false;
            }
            if (this.dropdown) {
                this.dropdown._parent = this._parent;
                this.dropdown.showAt(this.el);
                this.trigger('dropdownshow');
            }
        },
        _uiSetHasDropDownIcon: function (hasDropDown) {
            if (hasDropDown) {
                this.dropdownElement.show();
            } else {
                this.dropdownElement.hide();
            }
        }
    });

    return DropDownButton;
});
define('data-schema',['require','./declare'],function (require) {

    var declare = require('./declare');


    var DataSchema = declare('DataSchema', {


        schema: {
            meta: [],
            listLocator: '*',
            fields: '*'
        },

        schemaFilter: function (data) {

            var schema = this.schema,
                meta = schema.meta || [],
                listLocator = schema.listLocator || '*',
                fields = schema.fields || '*',
                list,
                self = this,
                result = {};

            if(listLocator === '*'){
                list = data;
            }else{
                list = this.getByPath(data, listLocator);
            }

            if (typeof fields === 'string') {
                fields = [fields];
            }

            if (typeof meta === 'string') {
                meta = [meta];
            }

            if(fields[0] != '*'){
                list = list.map(function (item) {
                    var object = {};

                    fields.forEach(function (field) {
                        if (typeof field === 'string') {
                            object[field] = item[field];
                        } else {
                            object[field.key] = item[field.locator];
                        }
                    });
                    return object;

                });
            }



            result.list = list;

            meta.forEach(function (metaItem) {
                if (typeof metaItem === 'string') {
                    result[metaItem] = self.getByPath(data, metaItem);
                } else {
                    result[metaItem.key] = self.getByPath(data, metaItem.locator);
                }
            });

            return result;

        },

        getByPath: function (data, path) {
            var field = path.split('.'),
                val,
                key;

            if (field.length) {
                key = field[0];
                if (key.indexOf('[') >= 0) {
                    key = key.match(/(.*)\[(.*)\]/);
                    if (key) {
                        val = data[key[1]][key[2]];
                    }
                } else {
                    val = data[field[0]];
                }
                if (val) {
                    for (var i = 1; i < field.length; i++) {
                        val = val[field[i]];
                        if (typeof val === 'undefined') {
                            break;
                        }
                    }
                }
            }
            return val;
        }
    });

    return DataSchema;

});
define('json-store',['require','jquery','./declare','./events','./data-schema'],function (require) {
	var $ = require('jquery'),
	declare = require('./declare'),
	Events = require('./events'),
    DataSchema = require('./data-schema');

	var arrayPromise = function (result) {
		if (!result) {
			return;
		}
		var propMethods = ['forEach', 'map', 'filter'];
		$.each(propMethods, function (index, method) {
			if (!result[method]) {
				result[method] = function () {
					var args = arguments;
					//存储遍历的函数
					return $.when(result).then(function (data) {
						Array.prototype.unshift.call(args, data || []);
						return arrayPromise(arrayUtils[method].apply(this, args));
					});
				};
			}
		});
		if (!result.then) {
			result = $.extend(result, $.when(result).then(function (result) {
						return result;
					}));
		}
		return result;
	};

	var arrayUtils = {
		forEach : function (data, callback) {
			for (var i = 0; i < data.length; i++) {
				if (callback.call(data[i], data[i], i) === false) {
					break;
				}
			}
		},
		map : function (data, callback) {
			for (var i = 0; i < data.length; i++) {
				var item = callback.call(data[i], data[i], i);
				data[i] = item;
			}
			return data;
		},
		filter : function (data, callback) {
			var filterData = [];
			arrayUtils.forEach(data, function (item) {
				if (callback(item)) {
					filterData.push(item);
				}
			});
			return filterData;
		}
	};
	/**
	 * 静态数据源，用于数据的查询，过滤，排序，分页等
	 * @class Simple.JsonStore
	 * @module json-store
	 */
	var JsonStore = declare('JsonStore', [Events, DataSchema], {

			name : 'JsonStore',

            data : {},

            index: 'id',

			init : function () {
                this.schemaData = this.schemaFilter(this.data);
                this.data = this.schemaData.list;
				this._afterDataChange(this.data);
			},
			queryEngine : function (data, options) {
				var filterData,
				//排序参数
				sortSet = options.sort;
				//先通过条件过滤
				filterData = this._filter(data, options);
				if (sortSet) {
					if (typeof sortSet == 'function') {
						filterData.sort(sortSet);
					} else {
						if ($.isPlainObject(sortSet)) {
							sortSet = [sortSet];
						}
						for (var i = 0; i < sortSet.length; i++) {
							filterData.sort(function (a, b) {
								var aValue = a[sortSet[i].attr],
								bValue = b[sortSet[i].attr];
								return sortSet[i].sortBy == 'desc' ? (aValue < bValue) : (aValue > bValue);
							});
						}
					}
				}

				//分页
				if (options.start && options.limit) {
					filterData = filterData.slice(options.start, options.limit);
				}
				return filterData;
			},
			_filter : function (data, options) {
				var query = options.query,
				packageQuery = query;
				//all data
				if (!query) {
					return data;
				}

				if (typeof query === 'string') {
					packageQuery = this[query];
				} else if ($.isPlainObject(query)) {
					packageQuery = function (value, index) {
						for (var key in query) {
							var condition;
							if (options.strict === false) {
								condition = (value[key].indexOf(query[key]) == -1);

							} else {
								condition = (query[key] != value[key]);
							}
							if (condition) {
								return false;
							}
						}
						return true;
					};
				}
				return arrayUtils.filter(data, packageQuery);
			},
			/**
			 * 增加一条数据
			 * @param object
			 * @param options
			 * @returns {*}
			 */
			add : function (object, options) {
				options = options || {};
				options.override = false;
				return this.put(object, options);
			},
			/**
			 * 根据id获取一条数据
			 * @param id
			 * @returns {Object}
			 */
			get : function (id) {
				return id && this.data[this._dataHash[id]];
			},
			/**
			 * 修改一条数据
			 * @param object
			 * @param options
			 * @returns {*|number}
			 */
			put : function (object, options) {
				options = options || {};
				var id = options[this.index] || object[this.index] || Math.random();
				//判断是否存在此索引
				if (id in this._dataHash) {
					//add 操作
					if (options.override === false) {
						this.trigger('error', object);
					} else {
						//替换data
						this.data[this._dataHash[id]] = object;
					}
				} else {
					this._dataHash[id] = this.data.push(object) - 1;
				}
				if (!options.disableEvent) {
					if (options.override === false) {
						this.trigger('add', object);
					} else {
						this.trigger('put', object);
					}
				}

				return id;
			},
			/**
			 * 根据id删除一条数据
			 * @param id
			 * @param options
			 */
			remove : function (id, options) {
				options = options || {};
				if (id in this._dataHash) {
					this.data.splice(this._dataHash[id], 1);
					this._afterDataChange(this.data);
					if (!options.disableEvent) {
						this.trigger('remove', this.get(id));
					}
				}
			},
			/**
			 * 查询数据
			 * @param query
			 * @param options
			 * @returns {Array}
			 */
			find : function (query, options) {
				var result = [];
				options = options || {};

				options.query = query;
				result = this.queryEngine(this.data, options);

				arrayPromise(result);
				if (!options.disableEvent) {
					this.trigger('change', result);
				}

				return result;
			},
			/**
			 * 获取所有数据
			 * @returns {Array}
			 */
			findAll : function () {
				return arrayPromise(this.data);
			},
			_afterDataChange : function (data) {
				var dataHash = {};
				for (var i = 0; i < data.length; i++) {
					dataHash[data[i][this.index]] = i;
				}
				this._dataHash = dataHash;
			}
		});

	return JsonStore;

});

define('menu',['require','jquery','./declare','./widget','./popup'],function (require) {

    var $ = require('jquery'), declare = require('./declare'), Widget = require('./widget');

    var MenuItem, Menu ,
        Popup = require('./popup');


    /**
     * 渲染每个菜单项
     * @class Simple.MenuItem
     * @extends Simple.Widget
     * @protected
     */
    MenuItem = declare('MenuItem', Widget, {

        name: 'MenuItem',
        /**
         * 指定生成的容器的tagName
         * @property tagName
         * @type String
         * @default ul
         */
        tagName: 'ul',
        /**
         * 指定每个Item的文字
         * @property label
         * @type String
         * @default simple-menu
         */
        label: 'simple-menu',

        /**
         * 指定每个Item的图标
         * @property icon
         * @type String
         */
        icon: '',
        /**
         * 该菜单项的帮助信息
         * @property helper
         * @type String
         */
        helper: '',
        /**
         * 跳转的链接地址
         * @property url
         * @type String
         */
        url: '',
        /**
         * 该菜单项是否被禁用
         * @property disabled
         * @type Boolean
         * @default false
         */
        disabled: false,
        /**
         * 该菜单项是否被选中
         * @property checked
         * @type Boolean
         * @default false
         */
        checked: false,
        /**
         * 该菜单项的点击事件
         * @property handle
         * @type Function
         */
        handle: $.noop,
        /**
         * 生成该菜单的模版
         * @property template
         * @type String
         */
        template: '<li class="sui-menu-item">\
            <a class="sui-menu-node" data-role="menuNode"><i></i>\
                <span class="" data-role="menuIcon"></span>\
                <span data-role="menuLabel"></span> <em data-role="menuHelper"></em> </a>\
        </li>',

        /**
         * 为该菜单项绑定事件
         * @method bindUI
         */
        bindUI: function () {
            this.el.on({
                'click': $.proxy(this._onclick, this),
                'mouseover': $.proxy(this._onmouseover, this),
                'mouseout': $.proxy(this._onmouseout, this)
            });
        },
        /**
         * 点击事件操作
         * @method _onclick
         * @param e {Event} jQuery包装的Event
         * @protected
         */
        _onclick: function (e) {
            if (e.currentTarget.className.indexOf('disable') != -1) {
                return;
            }
            this.handle.call(this, e);
        },
        /**
         * 悬浮事件操作
         * @method _onmouseover
         * @param e {Event} jQuery包装的Event
         * @protected
         */
        _onmouseover: function (e) {
            this.el.addClass('sui-state-hover');
        },
        /**
         * 移出事件操作
         * @method _onmouseout
         * @param e {Event} jQuery包装的Event
         * @protected
         */
        _onmouseout: function (e) {
            this.el.removeClass('sui-state-hover');
        },
        /**
         * 渲染菜单项的文字
         * @method _setterFocus
         * @param label {String} 文字
         * @protected
         * @return label
         */
        _uiSetLabel: function (label) {
            this.menuLabel.text(label);
            return label;
        },

        /**
         * 渲染菜单的帮助信息
         * @method _setterHelper
         * @param helper {String} 帮助信息
         * @protected
         * @return helper
         */
        _uiSetHelper: function (helper) {
            this.menuHelper.html(helper);
            return helper;
        },
        /**
         * 渲染菜单是否被选中
         * @method _setterChecked
         * @param checked {Boolean} 菜单项是否被选中
         * @protected
         * @return checked
         */
        _uiSetChecked: function (checked) {
            this.el[(checked ? 'addClass' : 'removeClass')]('sui-state-checked');
            return checked;
        },
        /**
         * 渲染菜单的链接
         * @method _setterUrl
         * @param url {String} 菜单的链接
         * @protected
         * @return url
         */
        _uiSetUrl: function (url) {
            if (url) {
                this.menuNode.attr('href', url);
            }
            return url;
        },
        _uiSetIcon: function (icon) {
            if (icon) {
                this.menuIcon.removeClass().addClass(icon);
            }
            return icon;
        }
    });
    /**
     * Menu用于模拟点击桌面图标出现的菜单条目，继承于Widget类，同样Menu可以选择延迟渲染还是声明即渲染.
     *
     *     require(['ui/menu'],function(){
     *         new Menu({
     *             items:[{label:'simple-menu'}]
     *         });
     *     });
     *
     * @module ui.menu
     * @class Simple.Menu
     * @extends Simple.Widget
     */
    Menu = declare('Menu', [Popup], {

        name: 'Menu',

        /**
         * 指定渲染菜单的数据
         * @property items
         * @type Array
         */
        items: [],
        /**
         * 指定渲染菜单的父级模版
         * @property  items
         * @type String
         * @protected
         */
        template: '<div class="sui-menu" data-role="focusNode"></div>',
        /**
         * 私有属性判断是否有父级菜单
         * @property  _hasParentMenu
         * @type Boolean
         * @private
         */
        _hasParentMenu: false,


        /**
         * 初始化一些属性，用来存储需要的数据
         * @method initAttrs
         */
        initAttrs: function () {

            this._menuItemInc = [];
            //存储有子菜单的节点
            this._menuItemsHasChilds = [];
        },



        /**
         * 渲染该菜單
         * @method renderUI
         * @protected
         */
        renderUI: function () {
            var items = this.get('items');
            this._parseItems(items);
        },

        /**
         * 为该菜单绑定事件
         * @method bindUI
         * @protected
         */
        _bindUI: function () {
            this._menuItemsHasChilds.forEach(function (menuItem, index) {
                //延迟显示菜单
                var showTimeout, hideTimeout;
                menuItem.el.on('mouseenter', function () {
                    showTimeout = setTimeout(function () {
                        menuItem.inc.showAt(menuItem.inc.getParent().el);
                    }, 200);

                });
                menuItem.el.on('mouseleave', function () {
                    if (showTimeout) {
                        clearTimeout(showTimeout);
                    }
                    hideTimeout = setTimeout(function () {
                        menuItem.inc.hide();
                    }, 200);
                });
            }.bind(this));

        },

        _setterItems: function (items) {
            if (!this.isRender()) {
                this.render(document.body);
                this.el.hide();
            }
            this.el.empty();
            this._parseItems(items);
        },
        /**
         * 渲染该菜單
         * @method _parseItems
         * @param items {Array} 每个菜单项的数据
         * @private
         */
        _parseItems: function (items) {
            if ($.isArray(items) && items.length) {
                if (typeof items[0].title === 'string' || items[0].items) {
                    this._parseItemsByGroup(items);
                } else if (typeof items[0].label === 'string') {
                    this._parseItemsBySingle(items);
                } else {
                    throw new Error('不能识别的数据格式！');
                }
            } else {
                // throw new Error('不能识别的数据格式！');
            }
        },
        /**
         * 通过菜单组渲染该菜单
         * @method _parseItemsByGroup
         * @param items {Array} 每个菜单项的数据
         * @private
         */
        _parseItemsByGroup: function (items) {
            $.each(items, $.proxy(function (index, item) {
                //存在标题
                if (item.title) {
                    this.el.append('<h3 class="sui-menu-title">' + item.title + '</h3>');
                }
                //菜单项
                if (item.items && item.items.length) {
                    this._parseItemsBySingle(item.items);
                }

            }, this));
        },
        /**
         * 通过单个菜单渲染该菜单
         * @method _parseItemsBySingle
         * @param items {Array} 每个菜单项的数据
         * @private
         */
        _parseItemsBySingle: function (items) {
            var childContainer = $('<ul class="sui-menu-content"/>').appendTo(this.el);

            $.each(items, $.proxy(function (index, item) {
                var menuItemInc = new MenuItem($.extend(item, {
                    container: childContainer,
                    _parent: this
                }));
                if (item.childs) {
                    menuItemInc.menuNode.addClass('sui-menu-hassub');
                    var menuInc = new Menu({
                        items: item.childs,
                        container: menuItemInc.el,
                        _hasParentMenu: true,
                        _parent: menuItemInc,
                        position: 'lt rt',
                        offsetX: -5,
                        style:{
                            display:'none'
                        }
                    });
                    this._menuItemsHasChilds.push({
                        inc: menuInc,
                        el: menuItemInc.el
                    });
                }
                this._menuItemInc.push(menuItemInc);
            }, this));
        },
        /**
         * 为已有的菜单增加数据
         * @method addChild
         * @param items {Array} 每个菜单项的数据
         * @public
         */
        addChild: function (items) {
            if (!this.isRender()) {
                this.render();
            }
            this._parseItems(items);
        },
        /**
         * 获取菜单中的菜单项
         * @method getItem
         * @param index {Int} 菜单项的序列
         */
        getItem: function (index) {
            return this._menuItemInc[index];
        },


        /**
         * 销毁该菜单
         * @method destroy
         */
        destroy: function () {
            this._menuItemsHasChilds.forEach(function (menuItem) {
                menuItem.destroy();
            });
            this._menuItemsHasChilds = null;
            this.inherit(arguments);
        }
    });
    return Menu;
});

define('pagination',['require','jquery','./widget','./declare'],function (require) {
    var $ = require('jquery'),
        Widget = require('./widget'),
        Pagination,
        declare = require('./declare');
    /**
     * 提供分页功能的组件
     * @class Simple.Pagination
     * @extends Simple.Widget
     * @module ui.pagination
     */
    Pagination = declare('Pagination', Widget, {

        name: 'Pagination',
        /**
         * 分页条目的总数量
         * @property totalCount
         * @type Int
         * @default 100
         */
        totalCount: 0,
        /**
         * 分页尺寸大小
         * @property pageSize
         * @type Int
         * @default 10
         */
        pageSize: 15,
        /**
         * 分页显示的数量
         * @property pageShowCount
         * @type Int
         * @default 9
         */
        pageShowCount: 9,
        /**
         * 当前页
         * @property currentPage
         * @type Int
         * @default 1
         */
        currentPage: 1,
        /**
         * 分页的样式
         * @property pageStyle
         * @type String
         * @default 'default'
         */
        pageType: 'default',
        /**
         * 分页的模版
         * @property template
         * @type String
         * @default '<div class="sui-pagination"></div>'
         */
        template: '<div class="sui-pagination"></div>',
        /**
         * 初始化分页组件的属性
         * @method initAttrs
         */
        initAttrs: function () {
            this.totalPage = Math.ceil(this.get('totalCount') / this.get('pageSize'));
        },
        /**
         * 为分页组件绑定事件
         * @method bindUI
         */
        bindUI: function () {
            this.el.on('click', 'a', this._onclick.bind(this));
        },
        /**
         * 分页的点击事件
         * @method _onclick
         * @param e {Event} jQuery包装的Event
         * @protected
         */
        _onclick: function (e) {
            var target = e.currentTarget, inx;
            if (/disable/.test(target.className)) {
                return false;
            }
            inx = parseInt(target.getAttribute('data-page'), 10);
            if (!isNaN(inx)) {
                this.set('currentPage', inx);
            }
        },
        /**
         * 根据分页总数量来重新渲染分页
         * @method _setterTotalCount
         * @param totalCount {Int} 分页条目的总数量
         * @protected
         * @return totalCount
         */
        _setterTotalCount: function (totalCount) {
            if (totalCount) {
                this.totalPage = Math.ceil(totalCount / this.get('pageSize'));
                this.totalCount = totalCount;
                this.set('currentPage', this.get('currentPage'),{
                    forceEvent: true
                });
            }
        },
        /**
         * 根据分页尺寸大小来重新渲染分页
         * @method _setterPageSize
         * @param pageSize {Int} 分页尺寸大小
         * @protected
         * @return pageSize
         */
        _setterPageSize: function (pageSize) {
            if (pageSize) {
                this.totalPage = Math.ceil(this.get('totalCount') / pageSize);
                this.pageSize = pageSize;
                this.set('currentPage', this.get('currentPage'),{
                    forceEvent: true
                });
            }
        },
        /**
         * 根据当前页来重新渲染分页
         * @method _uiSetCurrentPage
         * @param currentPage {Int} 当前页
         * @protected
         * @return currentPage
         */
        _uiSetCurrentPage: function (currentPage) {
            currentPage = parseInt(currentPage, 10);
            if (currentPage > this.get('totalPage')) {
                currentPage = this.get('totalPage');
            } else if (currentPage < 1) {
                currentPage = 1;
            }
            this._renderPage(currentPage, this.get('totalPage'));
        },

        /**
         * 根据当前页和总页数来渲染分页
         * @method _renderPage
         * @private
         * @param {Int} currentPage 当前页
         * @param {Int} totalPage 总页数
         */
        _renderPage: function (currentPage, totalPage) {
            if (totalPage && currentPage) {
                var pageHtml = this._getPageHtml(currentPage, totalPage);
                this.el.html(pageHtml);
            } else {
                this.el.html('');
            }
        },
        /**
         * 根据给定页数的HTML
         * @method _getItemHtml
         * @private
         * @param {Int} index 当前页
         */
        _getItemHtml: function (index) {
            return index == this.get('currentPage') ? '<span class="sui-pagination-item sui-state-current">' + index + '</span>' : '<a data-page="' + index + '" class="sui-pagination-item">' + index + '</a>';
        },
        _getPageHtml:function(currentPage,totalPage){
            var pageHtml = '',
                pageShowCount = this.get('pageShowCount'), // 减3的原因是因为需要去除第一页，最后一页，和当前页
                realPageShowCount = pageShowCount - 3, // 得到在当前页周围的显示分页数量
                halfCount = parseInt(realPageShowCount / 2, 10), // 起始渲染分页的位置
                start, end;
            // prev按钮渲染
            if (currentPage <= 1) {
                pageHtml += '<a class="sui-pagination-prev sui-state-disabled sui-pagination-item" href="javascript:void(0)">&lt;prev</a>';
            } else {
                pageHtml += '<a class="sui-pagination-prev  sui-pagination-item" href="javascript:void(0)" data-page="' + (currentPage - 1) + '">&lt;prev</a>';
            }
            // 如果要显示首页
            // 如果要显示末页
            // 如果总页数小于允许显示的页数，则全部显示
            if (totalPage <= pageShowCount) {
                for (var i = 1; i <= totalPage; i++) {
                    pageHtml += this._getItemHtml(i);
                }
            }
            // 如果总页数大于允许显示的页数
            else {
                // 如果是当前页是第一页
                pageHtml += this._getItemHtml(1);
                // 开始渲染的位置以及结束渲染的位置
                start = currentPage - halfCount;
                end = currentPage + realPageShowCount - halfCount;

                // 如果开始渲染的位置计算的结果要小于首页，则从第二页开始渲染，因为首页已经被渲染
                // 这个时候需要重新定位end位置~
                if (start <= 1) {
                    start = 2;
                    end = start + realPageShowCount;
                }

                // 如果第一页和开始渲染的位置之间有间隔，则使用省略号代替
                if (start > 2) {
                    pageHtml += '<span class="sui-pagination-ellipsis">...</span>';
                }

                // 如果结束渲染的位置计算结果大于最大页数-1，重新定位
                if (end >= totalPage - 1) {
                    end = totalPage - 1;
                    start = totalPage - realPageShowCount - 1;
                }

                // 开始渲染中间的页数
                for (var i = start; i <= end; i++) {
                    pageHtml += this._getItemHtml(i);
                }

                // 如果渲染结束的位置距离尾页还有间隔，用省略号代替
                if (end < totalPage - 1) {
                    pageHtml += '<span class="sui-pagination-ellipsis">...</span>';
                }
                // 如果当前页就是尾页
                pageHtml += this._getItemHtml(totalPage);
            }

            // next 按钮渲染
            if (currentPage >= totalPage) {
                pageHtml += '<a class="sui-pagination-next sui-state-disabled sui-pagination-item" href="javascript:void(0)">Next &gt;</a>';
            } else {
                pageHtml += '<a class="sui-pagination-next sui-pagination-item" href="javascript:void(0)" data-page="' + (currentPage + 1) + '">Next &gt;</a>';
            }

            pageHtml += '</div>';

            return pageHtml;
        }
    });

    return Pagination;

});

define('resizable',['require','jquery','./declare','./events'],function (require) {
    var $ = require('jquery'),
        declare = require('./declare'),
        Events = require('./events'),
        Resizable;
    
    /**
     * 让一个dom元素可以被重设尺寸。
     *     
     *     require(['ui/resize'],function(){
     *         $('#test').resizable();
     *     });
     *     
     * @class Simple.Resize
     * @module ui.resize
     */
    Resizable = declare("Resizable", Events, {
        /**
         * 设置需要重设尺寸的节点
         * @property node
         * @type String | HTMLElement
         * @default ''
         */
        node: '',
        /**
         * 设置重设尺寸的方向，可选值有:
         * 
         *     "n", "ne", "e", "se", "s", "sw", "w", "nw"
         *     
         * @property direction
         * @type Array
         * @default ["e", "se", "s"]
         */
        direction: ["e", "se", "s"],
        /**
         * 设置重设尺寸的最大宽度
         * @property maxWidth
         * @type Int
         * @default null
         */
        maxWidth: null,
        /**
         * 设置重设尺寸的最小宽度
         * @property minWidth
         * @type Int
         * @default null
         */
        minWidth: null,
        /**
         * 设置重设尺寸的最小高度
         * @property minHeight
         * @type Int
         * @default null
         */
        minHeight: null,
        /**
         * 设置重设尺寸的最大高度
         * @property minWidth
         * @type Int
         * @default null
         */
        maxHeight: null,
        
        /**
         * 初始化重设尺寸的必要条件
         * @method init
         */
        init: function(){
            if (this.node) {
                this.node = $(this.node);
                var position = this.node.css("position");
                if (position == "static") {
                    this.node.css({
                        "position": "relative",
                        top: 0,
                        left: 0
                    });
                }
                this._createHandle(this.node);
                this._triggerEvent();
            }
        },
        /**
         * 销毁重设尺寸
         * @method destroy
         */
        destroy: function(){
            this.node.find(".sui-resize").off();
            this.node.find(".sui-resize").remove();
        },
        /**
         * 触发拖动事件
         * @method _triggerEvent
         * @private
         */
        _triggerEvent: function(){
            var self = this;
            $(".sui-resize", this.node).each(function(){
                var type = $(this).attr("data-event");
                $(this).mousedown(function(e){
                    e.preventDefault();
                    $(this).trigger("resize" + type, [e, self.node]);
                    return false;
                });
            });
        },
        /**
         * 创建重设尺寸手柄
         * @method _createHandle
         * @param {HTMLElement} node 需要重设尺寸的节点
         * @private
         */
        _createHandle: function(node){
            var self = this;
            if (this.direction) {
                $.each(this.direction, function(i, item){
                    var divHandle = $('<div/>').addClass("sui-resize sui-resize-" + item).attr("data-event", item);
                    divHandle.on("resize" + item, function(e, event, node){
                        self._doMouseDown.apply(self, [event, node, item]);
                    });
                    node.append(divHandle);
                });
            }
        },
        /**
         * 鼠标按下的事件处理
         * @method _doMouseDown
         * @param {jQuery Event} e jQuery 包装后的Event对象
         * @param {HTMLElement} node 需要重设尺寸的节点
         * @param {String} item 重设尺寸的方向
         * @private
         */
        _doMouseDown: function(e, node, item){
            var self = this;
            this.lastX = e.pageX;
            this.lastY = e.pageY;
            this.nodeWidth = node.width();
            this.nodeHeight =node.height();
            this.top = (this.getOffset(node)).top;
            this.left = (this.getOffset(node)).left;
            $(document).mousemove(function(e){
                self._doMouseMove.apply(self, [e, node, item]);
            });
            $(document).mouseup(function(e){
                self._doMouseUp.apply(self, [e, node, item]);
            });
            return false;
        },
        /**
         * 鼠标移动的事件处理
         * @method _doMouseMove
         * @param {jQuery Event} e jQuery 包装后的Event对象
         * @param {HTMLElement} node 需要重设尺寸的节点
         * @param {String} item 重设尺寸的方向
         * @private
         */
        _doMouseMove: function(e, node, item){
            if ($(".draggable-iframeFix")[0]) {
                $(".draggable-iframeFix").show();
            }
            else {
                var iframeFixDiv = $("<div/>").css({
                    width: "100%",
                    height: "100%",
                    position: "absolute",
                    opacity: 0,
                    zIndex: 10000,
                    top: 0,
                    left: 0
                }).addClass("draggable-iframeFix");
                $(document.body).append(iframeFixDiv);
            }
            var x = e.pageX, y = e.pageY
            changeX = x - this.lastX, changeY = y - this.lastY;
            switch (item) {
                case "n":
                    node.css({
                        top: this.top + changeY,
                        height: this.nodeHeight - changeY
                    });
                    break;
                case "e":
                    node.css({
                        width: this.nodeWidth + changeX
                    });
                    break;
                case "s":
                    node.css({
                        height: this.nodeHeight + changeY
                    });
                    break;
                case "w":
                    node.css({
                        left: this.left + changeX,
                        width: this.nodeWidth - changeX
                    });
                    break;
                case "ne":
                    node.css({
                        top: this.top + changeY,
                        height: this.nodeHeight - changeY,
                        width: this.nodeWidth + changeX
                    });
                    break;
                case "se":
                    node.css({
                        height: this.nodeHeight + changeY,
                        width: this.nodeWidth + changeX
                    });
                    break;
                case "sw":
                    node.css({
                        height: this.nodeHeight + changeY,
                        left: this.left + changeX,
                        width: this.nodeWidth - changeX
                    });
                    break;
                case "nw":
                    node.css({
                        top: this.top + changeY,
                        height: this.nodeHeight - changeY,
                        left: this.left + changeX,
                        width: this.nodeWidth - changeX
                    });
                    break;
            }
        },
        /**
         * 鼠标弹起的事件处理
         * @method _doMouseUp
         * @private
         */
        _doMouseUp: function(){
            $(document).unbind("mousemove").unbind("mouseup");
            $(".draggable-iframeFix").hide();
        },
        //获取正确的left和top值
        getOffset: function(element){
            element = $(element);
            var position = element.css("position"), top, left, parentOffset, offset = element.offset(), right, bottom;
            if (position == "static") {
                element.css("position", "relative");
                top = 0;
                left = 0;
            }
            else 
                if (position == "absolute") {
                    var el = element[0],
                        offsetParent = el.offsetParent;
                    parentOffset = $(offsetParent).offset();
                    top = offset.top - parentOffset.top;
                    left = offset.left - parentOffset.left;
                }
                else 
                    if (position == "fixed") {
                        top = parseFloat(element.css("top"));
                        left = parseFloat(element.css("left"));
                        if (isNaN(top)) {
                            top = offset.top - Math.max(document.documentElement.scrollTop, document.body.scrollTop);
                        }
                        if (isNaN(left)) {
                            left = offset.left;
                        }
                    }
                    else 
                        if (position == "relative") {
                            top = parseFloat(element.css("top"));
                            left = parseFloat(element.css("left"));
                            right = parseFloat(element.css("right"));
                            bottom = parseFloat(element.css("bottom"));
                            if (isNaN(top)) {
                                if (!isNaN(bottom)) {
                                    top = -bottom
                                }
                                else {
                                    top = 0;
                                }
                            }
                            if (isNaN(left)) {
                                if (!isNaN(right)) {
                                    left = -right
                                }
                                else {
                                    left = 0;
                                }
                            }
                        }
            
            return {
                left: left,
                top: top
            }
        }
    });
    return Resizable;
});

define('router',['require','jquery','./events','./declare','./attribute'],function (require) {
    var $ = require('jquery'),
        Events = require('./events'),
        declare = require('./declare'),
        Attribute = require('./attribute');

    var documentMode = window.document.documentMode,
        oldIE = (!documentMode || documentMode <= 8),
        //IE8 的兼容模式不支持hashchange
        hashChangeSupported = ('onhashchange' in window) && !oldIE,

        pushStateSupported = ('pushState' in window.history);

    //this is hashchange
    var HashChangeHistory = declare(Events, {

        init: function () {
            $(window).on('hashchange', $.proxy(this.change, this));
        },

        getHash: function () {
            return window.location.hash.substring(1);
        },
        change: function () {
            var hash = this.getHash();
            if (this.currentHash != hash) {
                this.trigger('change', hash);
                this.currentHash = hash;
            }
        },
        //options.replace 是否产生历史记录
        //options.disableEvent 是否禁止事件
        navigate: function (url, options) {
            options = options || {};
            var href;
            url = url.replace(/^#*/, '');
            if (options.disableEvent) {
                this.currentHash = url;
            }
            if (options.replace) {
                href = window.location.href.replace(/(javascript:|#).*$/, '');
                window.location.replace(href + '#' + url);
            } else {
                location.hash = url;
            }
        }
    });

    var PushStateHistory = declare(Events, {


        init: function (config) {
            config = config || {};
            //ROOT指站点的根目录,设置了root的绝对路径，其他资源则会相对改路径进行定位
            this.root = config.root || window.location.pathname;
            this.fullUrl = this.getFullUrl() + this.root;
            //这个事件只在前进后退的时候有效好大的坑啊
            //与hashchange事件不一致
            $(window).on('popstate', $.proxy(this.change, this));
        },

        getFullUrl: function () {
            var location = document.location, rootUrl = location.protocol + '//' + (location.hostname || location.host);
            if (location.port || false) {
                rootUrl += ':' + location.port;
            }
            // Return
            return rootUrl;
        },

        getUrl: function () {
            var fullUrl = this.getFullUrl(), root = this.root;
            return window.location.href.replace(fullUrl + root, '');
        },
        change: function () {
            var url = this.getUrl();
            if (this.currentUrl != url) {
                this.trigger('change', url);
                this.currentUrl = url;
            }
        },
        //options.replace 是否产生历史记录
        //options.disableEvent 是否禁止事件
        navigate: function (url, options) {
            options = options || {};
            var fragment = this.root + url;
            if (!options.disableEvent) {
                this.trigger('change', url);
                this.currentUrl = url;
            }
            if (options.replace) {
                window.history.replaceState({}, document.title, fragment);
            } else {
                window.history.pushState({}, document.title, fragment);
            }
        }
    });

    var IframeHistory = declare(Events, {

        init: function () {
            this.lastHash = this.getHash();
            this.create(this.lastHash);
            setInterval($.proxy(this.poll, this), 50);
        },
        create: function (hash) {
            var iframe = '<iframe src="javascript:(function(){document.open(\'text/html\',\'replace\');document.domain =\'' + (document.domain) + '\';document.close();})();" tabindex="-1" />';
            this.iframe = $(iframe).hide().appendTo(document.body);
            this.iframe = this.iframe[0];
            this.lastIframeHash = hash;
            this._updateIframeHash(hash);
        },
        getHash: function () {
            return window.location.hash.substring(1);
        },
        getIframeHash: function () {
            if (!this.iframe || !this.iframe.contentWindow) {
                return '';
            }
            //TODO: add ajax call #!
            var prefix = '', hash = this.iframe.contentWindow.location.hash.substr(1);

            return prefix && hash.indexOf(prefix) === 0 ? hash.replace(prefix, '') : hash;
        },
        _updateIframeHash: function (hash, replace) {
            var iframeDoc = this.iframe && this.iframe.contentWindow && this.iframe.contentWindow.document,
                iframeLocation = iframeDoc && iframeDoc.location;

            if (!iframeDoc || !iframeLocation) {
                return;
            }

            if (replace) {
                iframeLocation.replace(hash.charAt(0) === '#' ? hash : '#' + hash);
            } else {
                iframeDoc.open().close();
                iframeLocation.hash = hash;
            }

        },
        _updateHash: function (hash, replace) {
            var href;
            if (replace) {
                href = window.location.href.replace(/(javascript:|#).*$/, '');
                window.location.replace(href + '#' + hash);
            } else {
                window.location.hash = hash;
            }
        },
        change: function () {
            if (this.currentHash != this.lastHash) {
                this.trigger('change', this.lastHash);
                this.currentHash = this.lastHash;
            }
        },
        poll: function () {
            var iframeHash = this.getIframeHash(),
                hash = this.getHash();
            //back or forward
            if (this.lastIframeHash != iframeHash) {
                this._updateHash(iframeHash);
                this.lastIframeHash = iframeHash;
                this.lastHash = iframeHash;
                this.change();
                //application cause
            } else if (hash != this.lastHash) {
                if (iframeHash != hash) {
                    this._updateIframeHash(hash);
                }
                this.lastHash = hash;
                this.change();
            }
        },
        navigate: function (url, options) {
            options = options || {};
            this._updateHash(url, options.replace);
            if (options.disableEvent) {
                this.currentHash = url;
            }
        }
    });

    var Router = declare('Router', Attribute, {
        routes: {},
        pushState: false,
        root: '',
        init: function (config) {
            this._routes = {};
            $.each(this.get('routes'), $.proxy(function (route, callback) {
                this.add(route, callback);
            }, this));
            if (this.get('pushState') && pushStateSupported) {
                this.history = new PushStateHistory({
                    root: this.get('root')
                });
            } else {
                if (hashChangeSupported) {
                    this.history = new HashChangeHistory();
                } else {
                    this.history = new IframeHistory();
                    //throw new Error('old browser not supported!')
                }
            }
        },
        start: function () {
            if (!this._started) {
                this.history.on('change', $.proxy(this._navigate, this));
                this.history.change();
                this._started = true;
            }
        },
        navigate: function (url, options) {
            this.history.navigate(url, options);
        },
        _navigate: function (url) {
            var route, query = {}, handle, self = this;
            var urlMatches = url.match(/(.*)\?(.*)/);
            if (urlMatches) {
                route = urlMatches[1];
                query = decodeQueryString(urlMatches[2], true);
            } else {
                route = url;
            }
            if (route) {
                var req = {
                    params: {},
                    query: query
                }, res = {}, callback;
                $.each(this._routes, $.proxy(function (i, routeMeta) {
                    var matches = route.match(routeMeta.regex);
                    if (matches && matches.length) {
                        matches.shift();
                        $.each(routeMeta.params, function (index, key) {
                            req.params[key] = matches[index];
                        });
                        req.url = url;
                        req.route = routeMeta.route;
                        //避免引用造成的问题
                        callback = $.extend([], routeMeta.callback);
                    }
                }, this));
                if (!callback) {
                    //do sth;
                    //this.redirect('*');
                } else {
                    req.next = function (error) {
                        if (error) {
                            callback = [];
                            return self;
                        }
                        handle = callback.shift();
                        if (handle) {
                            handle.call(self, req, res, req.next);
                        }
                    };
                    req.next();
                }
            } else {
                this.trigger('ready');
            }
        },
        redirect: function (url) {
            this.history.navigate(url, {
                replace: true
            });
        },
        //callback is an array;
        add: function (route, callback) {
            //'handle' --> this.handle
            callback = this._convertRightCallback(callback);
            if (!this._routes[route]) {
                var routeMeta = this._parse(route);
                if ($.isArray(callback)) {
                    routeMeta.callback = callback;
                } else {
                    routeMeta.callback = [callback];
                }
                this._routes[route] = routeMeta;
            } else {
                //[handle1,handle2]-->[handle,handle1,handle2]
                if ($.isArray(callback)) {
                    this._routes[route].callback.cocat.apply(this._routes[route].callback, callback);
                } else {
                    //'handle1' --> [handle handle1]
                    this._routes[route].callback.push(callback);
                }
            }
        },
        _parse: function (route) {
            var res = {
                route: route,
                regex: null,
                params: [],
                optionalParams: []
            }, url = route;
            if ({}.toString.call(route) !== '[object RegExp]') {
                //optional parameters
                /*var optionalMatches = url.match(/\(\/:([a-zA-Z0-9_]+)\)/g);
                 if(optionalMatches){
                 for(var j in optionalMatches){
                 optionalMatches[j] = optionalMatches[j].replace(/\(\/\:(.*)\)/,function($1,$2){
                 return $2;
                 });
                 }
                 res.optionalParams = optionalMatches;
                 url = url.replace(/\(\/:([a-zA-Z0-9_]+)\)/g,'(\/[a-zA-Z0-9_]+)?')
                 }*/
                //require parameters
                var matches = url.match(/\:([a-zA-Z0-9_]+)/g);
                if (matches) {
                    matches = $.map(matches, function (match) {
                        return match.substring(1);
                    });
                    res.params = matches;
                    url = url.replace(/\:([a-zA-Z0-9_]+)/g, '([a-zA-Z0-9_]+)');
                }
                res.regex = new RegExp('^' + url + '/?$');
            } else {
                res.regex = route;
            }
            return res;
        },
        //string --> function
        _convertRightCallback: function (callback) {
            var self = this;
            if (typeof callback === 'string') {
                return this[callback];
            }
            if ($.isArray(callback)) {
                $.each(callback, function (handle, index) {
                    handle = self._convertRightCallback(handle);
                    callback[index] = handle;
                });
                return callback;
            }
            return callback;
        }
    });

    var UNDEF;

    function typecastValue(val) {
        var r;
        if (val === null || val === 'null') {
            r = null;
        } else if (val === 'true') {
            r = true;
        } else if (val === 'false') {
            r = false;
        } else if (val === UNDEF || val === 'undefined') {
            r = UNDEF;
        } else if (val === '' || isNaN(val)) {
            //isNaN('') returns false
            r = val;
        } else {
            //parseFloat(null || '') returns NaN
            r = parseFloat(val);
        }
        return r;
    }

    function typecastArrayValues(values) {
        var n = values.length, result = [];
        while (n--) {
            result[n] = typecastValue(values[n]);
        }
        return result;
    }

    //borrowed from AMD-Utils
    function decodeQueryString(str, shouldTypecast) {
        var queryArr = (str || '').replace('?', '').split('&'), n = queryArr.length, obj = {}, item, val;
        while (n--) {
            item = queryArr[n].split('=');
            val = shouldTypecast ? (item[1]) : item[1];
            obj[item[0]] = ( typeof val === 'string') ? decodeURIComponent(val) : val;
        }
        return obj;
    }

    return Router;
});

define('toggle-button',['require','jquery','./declare','./button'],function (require) {

    var $ = require('jquery'), declare = require('./declare'), Button = require('./button');

    /**
     * 提供可分离的按钮组件
     * @extends Simple.Button
     * @class Simple.ToggleButton
     */
    var ToggleButton = declare('ToggleButton', Button, {

        name: 'ToggleButton',

        template: '<button class="sui-button" role="button" tabindex="0">\
            <i data-role="iconElement"></i>\
            <span data-role="labelElement" class="sui-button-content"></span>\
        </button>',
        /**
         * 该按钮是否被选中
         * @property checked {Boolean}
         * @default false
         */
        checked: false,

        _onclick: function (e) {
            if (/disable/.test(e.currentTarget.className)) {
                return false;
            }
            this.set('checked', !this.get('checked'));
            this.handle.call(this, e);
        },

        _uiSetChecked: function (checked) {
            if (checked) {
                this.el.addClass('sui-state-checked');
            } else {
                this.el.removeClass('sui-state-checked');
            }
        }
    });

    return ToggleButton;
});
define('tool-tip',['require','jquery','./declare','./popup'],function(require){

    var $ = require('jquery'),
        declare = require('./declare'),
        Popup = require('./popup');

    var ToolTip  = declare('ToolTip', Popup ,{

        name:'TooTip',

        triggerType:'hover',

        events:{
            'click [data-role=closeElement]':'hide'
        },

        template:'<div class="sui-popup sui-tooltip"><div data-role="toolTipArrow" class="sui-arrow"></div><div data-role="contentElement" class="sui-tooltip-bd"></div></div>',


        _renderUI: function(){
            var arrowMeta = this._getArrowMeta(this.get('direction'));
            this.toolTipArrow.addClass(arrowMeta.className);
            this.set('position',arrowMeta.position);
            this.set('offsetX',arrowMeta.offsetX);
            this.set('offsetY',arrowMeta.offsetY);
            this.inherit(arguments);
        },

        _bindUI: function(){
            this.inherit(arguments);
            this.before('show',function(){
                this.set('content',this.get('content'),{
                    forceEvent: true
                });
            });
        },

        _getArrowMeta: function(direction){

            var arrowClassName,
                offsetX,
                offsetY,
                position,
                width = this.toolTipArrow.outerWidth(),
                height = this.toolTipArrow.outerHeight();

            switch (direction) {
                case 'top':
                    arrowClassName = 'sui-arrow-bottom';
                    offsetY = -height;
                    position = 'lb lt';
                    break;
                case 'left':
                    arrowClassName = 'sui-arrow-right';
                    offsetX = -width;
                    position = 'rt lt';
                    break;
                case 'bottom':
                    arrowClassName = 'sui-arrow-top';
                    position = 'lt lb';
                    offsetY = height;
                    break;
                case 'right':
                    arrowClassName = 'sui-arrow-left';
                    position = 'lt rt';
                    offsetX = width;
                    break;
                default:
                    arrowClassName = 'sui-arrow-top';
                    position = 'lt lb';
                    offsetY = height;
            }
            return {
                className: arrowClassName,
                position: position,
                offsetX: offsetX || 0,
                offsetY: offsetY || 0
            };
        }
    });

    return ToolTip;
});
define('remote-store',['require','jquery','./events','./declare','./json-store','./data-schema'],function (require) {
    var $ = require('jquery'),
        Events = require('./events'),
        declare = require('./declare'),
        JsonStore = require('./json-store'),
        DataSchema = require('./data-schema'),
        queryEngine = function(url,config){
            return $.ajax($.extend({
                url:url
            },config));
        };

    var arrayPromise = function (result) {
        if (!result) {
            return;
        }
        var propMethods = ['forEach', 'map', 'filter'];
        $.each(propMethods, function (index, method) {
            if (!result[method]) {
                result[method] = function () {
                    var args = arguments;
                    //存储遍历的函数
                    return $.when(result).then(function (data) {
                        Array.prototype.unshift.call(args, data || []);
                        return arrayPromise(arrayUtils[method].apply(this, args));
                    });
                };
            }
        });
        if (!result.then) {
            result = $.extend(result, $.when(result).then(function (result) {
                return result;
            }));
        }
        return result;
    };

    var arrayUtils = {
        forEach: function (data, callback) {
            for (var i = 0; i < data.length; i++) {
                if (callback.call(data[i], data[i], i) === false) {
                    break;
                }
            }
        },
        map: function (data, callback) {
            for (var i = 0; i < data.length; i++) {
                var item = callback.call(data[i], data[i], i);
                data[i] = item;
            }
            return data;
        },
        filter: function (data, callback) {
            var filterData = [];
            arrayUtils.forEach(data, function (item) {
                if (callback(item)) {
                    filterData.push(item);
                }
            });
            return filterData;
        }
    };

    var RemoteStore = declare('RemoteStore',[Events,DataSchema],{


        queryEngine: queryEngine,

        target:'',

        index:'',


        init: function (config) {
            this._cacheParams = {};
        },

        add: function (object, options) {
            options = options || {};
            options.override = false;
            return this.put(object, options);
        },
        put: function (object, options) {
            options = $.extend({}, options, object);
            var self = this;
            return this.queryEngine(this.target, options).then(function (data) {
                if (self.isLoad) {
                    //以后端返回的数据为准
                    data = data || object;
                    options.disableEvent = true;
                    self.queryResult.put(object, options);
                }
                if (options.override === false) {
                    self.trigger('add', object);
                } else {
                    self.trigger('put', object);
                }
                return data;
            });
        },
        get: function (id, options) {
            var query = {};
            query[this.index] = id;
            if (options.cache && this.queryResult) {
                return this.queryResult.get(id);
            } else {
                options = options || {};
                return this.find(query, $.extend(options, {
                        disableEvent: true
                    })).then(function (data) {
                        return data[0];
                    });
            }
        },
        post: function (options) {
            return this.queryEngine(this.target, options);
        },

        find: function (query, options) {
            var self = this, config;
            options = options || {};
            if (options.cache && this.isLoad) {
                return this.queryResult.find(query, options);
            } else {
                if (options.override) {
                    config = $.extend({}, query, options);
                    delete config.override;
                } else {
                    config = $.extend({}, this._cacheParams, query, options);
                }
                this._cacheParams = config;
                var result = this.queryEngine(this.target, config);
                arrayPromise(result);
                result.done(function (data) {
                    data = data || {};
                    self.schemaData = self.schemaFilter(data);
                    self.data = self.schemaData.list;
                    //需要缓存
                    if (!options.disableCache) {
                        self.queryResult = new JsonStore({
                            index: self.index,
                            data: self.schemaData.list || []
                        });
                        self.isLoad = true;
                    }
                    if (!options.disableEvent) {
                        self.trigger('change', self.schemaData);
                    }
                    return data;
                });
                return result;
            }
        },

        remove: function (id, options) {
            options = options || {};
            options[this.index] = id;
            var self = this;
            return this.queryEngine(this.target, options).then(function (data) {
                if (self.isLoad) {
                    options.disableEvent = true;
                    if ($.isArray(id)) {
                        $.each(id, function (index, id) {
                            self.queryResult.remove(id, options);
                        });
                    } else {
                        self.queryResult.remove(id, options);
                    }
                }
                self.trigger('remove', data);
                return data;
            });
        },

        clear: function () {
            this.queryResult = null;
            this.isLoad = false;
        }
    });

    return RemoteStore;

});
define('selectable',['require','./declare','./events','jquery'],function(require){

    var declare = require('./declare'),
        Events = require('./events'),
        $ = require('jquery');
    
    /**
     * 让一个dom元素可以被框选
     *     
     *
     *
     * @class Simple.Selectable
     */
    var Selectable = declare("Selectable", Events, {
        /**
         * 设置需要框选元素的父级容器
         * @property node
         * @type String | HTMLElement
         * @default ''
         */
        node: null,
        /**
         * node元素中的子集节点，会被选中,应该是一个jQuery选择器
         * @property selectNode
         * @type String
         * @default ''
         */
        selectNode: null,
        /**
         * 选中的元素加上的类，以表明该元素被选中了
         * @property selectCls
         * @type String
         * @default 'sui-selectable'
         */
        selectCls: 'sui-selectable',
        /**
         * 延迟触发selectable事件
         * @property delay
         * @type Int
         * @default 3
         */
        delay: 3,

        init: function(){
            $(this.node).mousedown(this._mouseDown.bind(this));
        },
        /**
         * 销毁框选特性
         * @method destroy
         */
        destroy:function(){
            $(this.node).off();
        },
        //鼠标按下
        _mouseDown: function(e){
            var self = this;
            this.trigger('selectstart',e);
            //create div to show select area
            //this._createSelectArea();
            this.lastX = e.pageX;
            this.lastY = e.pageY;
            this.hasNodeSelected = [];
            $(document).mousemove(this._mouseMove.bind(this));
            $(document).mouseup(this._mouseUp.bind(this));
            $(this.node).unselect();
            $(document.body).unselect();
        },
        _mouseMove: function(e){
            var pageX = e.pageX,
                pageY = e.pageY,
                addX = Math.abs(pageX - this.lastX),
                addY = Math.abs(pageY - this.lastY),
                self = this,
                selector;
            
            if (addX > this.delay && addY > this.delay) {
                if (!this.selectProxy) {
                    this._createSelectArea(this.lastX, this.lastY);
                }
                //更新选择范围的DIV的大小
                this.selectProxy.width(addX).height(addY);
                //当改变的值为负值时，更新选中区域的left和top值
                if (pageX - this.lastX < 0) {
                    this.selectProxy.css("left", e.pageX);
                }
                if (pageY - this.lastY < 0) {
                    this.selectProxy.css("top", e.pageY);
                }
                //判断是否与Node节点下的selectNode相交
                if (this.selectNode) {
                    selector = this.selectNode;
                }
                else {
                    selector = "*";
                }
                $(this.node).find(selector).each(function(){
                    //是否相交
                    if (self._isIntersect(this, self.selectProxy[0])) {
                        if (!$(this).attr("y-selected") == 1) {
                            $(this).addClass(self.selectCls).attr("simple-selected", 1);
                        }
                    }
                    else {
                        $(this).removeClass(self.selectCls).attr("simple-selected", 0);
                    }
                });
                this.selectstart = true;
            }
        },
        _mouseUp: function(e){
            if (this.selectstart) {
                var self = this;
                //移除创建的div
                if (this.selectProxy) {
                    this.selectProxy.remove();
                }
                var selectNode = self._getSelectedNode();
                //触发选择结束事件
                this.trigger('selectend',selectNode);
                
                this.selectProxy = null;
                this.selectstart = false;
            }
            //解除事件绑定
            $(document).unbind("mousemove").unbind("mouseup");
            $(this.node).unselect(false);
            $(document.body).unselect(false);
        },
        _getSelectedNode: function(){
            return $(this.node).find('[simple-selected=1]');
        },
        //创建一个DIV来显示选择的范围
        _createSelectArea: function(x, y){
            this.selectProxy = $("<div/>").addClass("sui-selectable-proxy");
            this.selectProxy.css({
                left: x,
                top: y
            });
            this.selectProxy.appendTo(document.body);
        },
        _isIntersect: function(nodeA, nodeB){
            var nodeAOffset = $(nodeA).offset(),
                nodeBOffset = $(nodeB).offset(),
                nodeAWidth = $(nodeA).width(),
                nodeAHeight = $(nodeA).height(),
                nodeBWidth = $(nodeB).width(),
                nodeBHeight = $(nodeB).height();

            //不相交的情况
            //A top> B bottom
            //A bottom < B top
            //A right < B left
            //A left >B right
            if (nodeAOffset.top > nodeBOffset.top + nodeBHeight ||
            nodeAOffset.top + nodeAHeight < nodeBOffset.top ||
            nodeAOffset.left + nodeAWidth < nodeBOffset.left ||
            nodeAOffset.left > nodeBOffset.left + nodeBWidth) {
                return false;
            }
            else {
                return true;
            }
        }
    });
    
    //拖动的时候不要选中元素
    if (!$.fn.unselect) {
        $.fn.unselect = function (prevent) {
            prevent = (prevent == null) ? true : prevent;
            if (prevent) {
                return this.each(function(){
                    $(this).attr('unselectable', 'on')
                        .css('user-select', 'none')
                        .on('selectstart', false);
                });
            } else {
                return this.each(function () {
                    $(this).removeAttr('unselectable', 'on')
                        .css('user-select', 'inherit')
                        .off('selectstart');
                });
            }
        };
    }

    return Selectable;
});

define('sui',['require','./simple','./attribute','./auto-complete','./button','./button-group','./combo-button','./dialog','./drag','./date-picker','./dropdown-button','./json-store','./menu','./modal','./pagination','./popup','./resizable','./router','./toggle-button','./tool-tip','./remote-store','./data-schema','./selectable'],function(require){

    var S = require('./simple');
    require('./attribute');
    require('./auto-complete');
    require('./button');
    require('./button-group');
    require('./combo-button');
    require('./dialog');
    require('./drag');
    require('./date-picker');
    require('./dropdown-button');
    require('./json-store');
    require('./menu');
    require('./modal');
    require('./pagination');
    require('./popup');
    require('./resizable');
    require('./router');
    require('./toggle-button');
    require('./tool-tip');
    require('./remote-store');
    require('./data-schema');
    require('./selectable');

    return S;

});
